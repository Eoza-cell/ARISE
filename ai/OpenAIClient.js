const OpenAI = require('openai');

// Persistent database-backed AI memory system
class AIMemory {
    constructor(dbManager, maxHistory = 20) {
        this.dbManager = dbManager;
        this.maxHistory = maxHistory;
    }

    async getHistory(sessionId) {
        if (!this.dbManager) return [];
        return await this.dbManager.getConversationMemory(sessionId, this.maxHistory);
    }

    async addMessage(sessionId, role, content, contextData = {}) {
        if (!this.dbManager) return;
        
        await this.dbManager.saveConversationMemory(sessionId, role, content, {
            ...contextData,
            importance: this.calculateImportance(content, role),
            memoryType: this.determineMemoryType(content)
        });
    }

    async getImportantMemories(sessionId) {
        if (!this.dbManager) return [];
        return await this.dbManager.getImportantMemories(sessionId, 7, 5);
    }

    calculateImportance(content, role) {
        // Calcul de l'importance bas√© sur le contenu
        let importance = 5; // Base
        
        if (role === 'system') importance += 2;
        if (content.includes('combat') || content.includes('mort') || content.includes('niveau')) importance += 3;
        if (content.includes('royaume') || content.includes('ordre')) importance += 2;
        if (content.length > 200) importance += 1;
        
        return Math.min(10, importance);
    }

    determineMemoryType(content) {
        if (content.includes('combat') || content.includes('attaque')) return 'combat';
        if (content.includes('voyage') || content.includes('d√©place')) return 'location';
        if (content.includes('rencontre') || content.includes('PNJ')) return 'character';
        if (content.includes('d√©couvre') || content.includes('trouve')) return 'event';
        return 'conversation';
    }

    async clearHistory(sessionId) {
        // Ne pas supprimer d√©finitivement, juste marquer comme archiv√©
        console.log(`üßπ Archivage historique session: ${sessionId}`);
    }
}

class OpenAIClient {
    constructor(dbManager = null) {
        this.isAvailable = false;
        this.dbManager = dbManager;
        this.memory = new AIMemory(dbManager, 20); // max 20 messages avec persistance

        // Check if OpenAI API key is available
        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey) {
            console.log('‚ö†Ô∏è OPENAI_API_KEY non d√©finie - Le bot fonctionnera sans IA OpenAI');
            return;
        }

        try {
            this.openai = new OpenAI({
                apiKey: apiKey
            });
            this.isAvailable = true;
            console.log('‚úÖ OpenAI Client initialis√© avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation d\'OpenAI:', error.message);
            console.log('‚ö†Ô∏è Le bot fonctionnera en mode fallback sans IA OpenAI');
        }
    }

    // Ajoute un param√®tre sessionId pour g√©rer la m√©moire contextuelle
    async generateNarration(context, sessionId = "default") {
        if (!this.isAvailable) {
            return "Le narrateur semble momentan√©ment absent. L'action continue sans description d√©taill√©e.";
        }

        try {
            const prompt = this.buildNarrationPrompt(context);

            // R√©cup√©rer l'historique persistant et les souvenirs importants
            const recentHistory = await this.memory.getHistory(sessionId);
            const importantMemories = await this.memory.getImportantMemories(sessionId);
            
            // Construire le contexte enrichi avec m√©moire persistante
            let memoryContext = "";
            if (importantMemories.length > 0) {
                memoryContext = "\n\nSouvenirs importants:\n" + 
                    importantMemories.map(m => `- ${m.content} (${m.location || 'lieu inconnu'})`).join('\n');
            }
            
            const locationContext = `Le personnage ${context.character.name} est dans : ${context.character.currentLocation}. Il conna√Æt d√©j√† ce lieu.${memoryContext}`;

            // Message syst√®me avec contexte enrichi par la m√©moire persistante
            const systemMsg = {
                role: "system",
                content: `Tu es le narrateur omniscient de FRICTION ULTIMATE. Utilise la M√âMOIRE PERSISTANTE pour maintenir la coh√©rence narrative.

CONTEXTE ACTUEL : ${locationContext}

R√àGLES DE CONTINUIT√â AVANC√âES :
- Utilise les souvenirs importants pour cr√©er de la coh√©rence narrative
- Le personnage se souvient de ses actions pass√©es dans ce lieu
- R√©f√©rence subtilement les √©v√©nements marquants pr√©c√©dents
- Cr√©e des cons√©quences aux actions pass√©es
- D√©veloppe les relations avec les PNJ rencontr√©s

M√âMOIRE R√âCENTE :
${recentHistory.slice(-5).map(h => `${h.role}: ${h.content.substring(0, 100)}`).join('\n')}`
            };
            
            const messages = [systemMsg, { role: "user", content: prompt }];

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages,
                max_tokens: 300,
                temperature: 0.8
            });

            const aiReply = completion.choices[0].message.content;
            
            // Sauvegarde enrichie avec m√©tadonn√©es contextuelles
            await this.memory.addMessage(sessionId, "user", context.action, {
                location: context.character.currentLocation,
                playerId: context.character.playerId,
                characterId: context.character.id,
                action: context.action
            });
            
            await this.memory.addMessage(sessionId, "assistant", aiReply, {
                location: context.character.currentLocation,
                playerId: context.character.playerId,
                characterId: context.character.id
            });

            return aiReply;
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de narration OpenAI:', error);
            return "Le narrateur semble momentan√©ment absent. L'action continue sans description d√©taill√©e.";
        }
    }

    async generateCombatNarration(combatContext, sessionId = "default") {
        if (!this.isAvailable) {
            return "Le combat se d√©roule dans un tourbillon d'acier et de magie.";
        }

        try {
            const prompt = this.buildCombatPrompt(combatContext);

            const systemMsg = {
                role: "system",
                content: "Tu es le narrateur de combat de FRICTION ULTIMATE. D√©cris les combats de mani√®re √©pique et dramatique en fran√ßais."
            };
            const memoryHistory = this.memory.getHistory(sessionId);
            const messages = [systemMsg, ...memoryHistory, { role: "user", content: prompt }];

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages,
                max_tokens: 200,
                temperature: 0.9
            });

            const aiReply = completion.choices[0].message.content;
            this.memory.addMessage(sessionId, "user", prompt);
            this.memory.addMessage(sessionId, "assistant", aiReply);

            return aiReply;
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de narration de combat:', error);
            return "Le combat se d√©roule dans un tourbillon d'acier et de magie.";
        }
    }

    async generateCharacterResponse(character, situation, playerAction, sessionId = "default") {
        if (!this.isAvailable) {
            return "Les PNJ semblent fig√©s dans le temps...";
        }

        try {
            const prompt = this.buildCharacterResponsePrompt(character, situation, playerAction);

            const systemMsg = {
                role: "system",
                content: "Tu incarnes un PNJ du monde de FRICTION ULTIMATE. R√©ponds de mani√®re coh√©rente avec le lore du personnage en fran√ßais."
            };
            const memoryHistory = this.memory.getHistory(sessionId);
            const messages = [systemMsg, ...memoryHistory, { role: "user", content: prompt }];

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages,
                max_tokens: 150,
                temperature: 0.7
            });

            const aiReply = completion.choices[0].message.content;
            this.memory.addMessage(sessionId, "user", prompt);
            this.memory.addMessage(sessionId, "assistant", aiReply);

            return aiReply;
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de r√©ponse de personnage:', error);
            return "Les PNJ semblent fig√©s dans le temps...";
        }
    }

    async analyzePlayerAction(action, gameContext, sessionId = "default") {
        if (!this.isAvailable) {
            return {
                actionType: "unknown",
                precision: "medium",
                consequences: ["Action analys√©e de mani√®re basique"],
                affectedEntities: [],
                energyCost: 10,
                riskLevel: "medium"
            };
        }

        try {
            const prompt = `Analyse cette action de joueur dans FRICTION ULTIMATE:

Action: "${action}"
Contexte: ${JSON.stringify(gameContext, null, 2)}

D√©termine:
1. Type d'action (combat, exploration, social, etc.)
2. Niveau de pr√©cision (manque de d√©tails = vuln√©rabilit√©)
3. Cons√©quences probables
4. NPCs/environnement affect√©s

R√©ponds en JSON strict:
{
  "actionType": "string",
  "precision": "high|medium|low",
  "consequences": ["string"],
  "affectedEntities": ["string"],
  "energyCost": number,
  "riskLevel": "low|medium|high|extreme"
}`;

            const systemMsg = {
                role: "system",
                content: "Tu es un analyseur d'actions pour FRICTION ULTIMATE. R√©ponds uniquement en JSON valide."
            };
            const memoryHistory = this.memory.getHistory(sessionId);
            const messages = [systemMsg, ...memoryHistory, { role: "user", content: prompt }];

            const completion = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages,
                max_tokens: 200,
                temperature: 0.3
            });

            const aiReply = completion.choices[0].message.content;
            this.memory.addMessage(sessionId, "user", prompt);
            this.memory.addMessage(sessionId, "assistant", aiReply);

            try {
                return JSON.parse(aiReply);
            } catch (parseError) {
                console.error('‚ùå Erreur de parsing JSON:', parseError);
                return {
                    actionType: "unknown",
                    precision: "low",
                    consequences: ["Action impr√©cise"],
                    affectedEntities: [],
                    energyCost: 10,
                    riskLevel: "medium"
                };
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'analyse d\'action:', error);
            return {
                actionType: "unknown",
                precision: "low",
                consequences: ["Erreur d'analyse"],
                affectedEntities: [],
                energyCost: 10,
                riskLevel: "medium"
            };
        }
    }

    // Permet de r√©initialiser la m√©moire pour une session (ex: d√©but d'une nouvelle partie)
    clearMemory(sessionId = "default") {
        this.memory.clearHistory(sessionId);
    }

    buildNarrationPrompt(context) {
        const { character, location, action, gameState } = context;

        return `Tu es le narrateur omniscient du monde de FRICTION ULTIMATE, un univers m√©di√©val-technologique impitoyable.

CONTEXTE:
- Personnage: ${character.name} (${character.gender === 'male' ? 'Homme' : 'Femme'})
- Royaume: ${character.kingdom}
- Ordre: ${character.order || 'Aucun'}
- Niveau: ${character.level} (Puissance ${character.powerLevel})
- Localisation: ${character.currentLocation}
- Vie: ${character.currentLife}/${character.maxLife}
- √ânergie: ${character.currentEnergy}/${character.maxEnergy}

ACTION DU JOUEUR: ${action}

CONSIGNES:
1. D√©cris la sc√®ne de mani√®re immersive et dramatique
2. Int√®gre les √©l√©ments du royaume et de l'ordre du personnage
3. Mentionne les cons√©quences potentielles de l'action
4. Garde un ton sombre et myst√©rieux typique de Friction Ultimate
5. 2-3 phrases maximum, style narratif √©pique

Raconte ce qui se passe:`;
    }

    buildCombatPrompt(combatContext) {
        const { attacker, defender, action, weapon, result } = combatContext;

        return `D√©cris ce combat dans FRICTION ULTIMATE:

ATTAQUANT: ${attacker.name} (${attacker.powerLevel})
D√âFENSEUR: ${defender.name} (${defender.powerLevel})
ACTION: ${action}
ARME: ${weapon || 'Mains nues'}
R√âSULTAT: ${result}

Cr√©e une description √©pique de 2-3 phrases de cette action de combat.`;
    }

    buildCharacterResponsePrompt(character, situation, playerAction) {
        return `Tu incarnes un PNJ dans FRICTION ULTIMATE.

PERSONNAGE PNJ:
- Nom: ${character.name}
- Royaume/Ordre: ${character.faction}
- Personnalit√©: ${character.personality}
- Statut: ${character.status}

SITUATION: ${situation}
ACTION DU JOUEUR: ${playerAction}

CONSIGNES:
1. Reste fid√®le √† la personnalit√© du PNJ
2. Int√®gre le lore de ton royaume/ordre
3. R√©agis de mani√®re coh√©rente √† l'action du joueur
4. Garde le ton myst√©rieux et dramatique du monde
5. Sois concis (1-2 phrases)

R√©ponds en tant que ce PNJ:`;
    }
}

module.exports = OpenAIClient;
