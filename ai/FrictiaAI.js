/**
 * Frictia AI - IA conversationnelle avec personnalit√© d'Erza Scarlet
 * Avatar: Erza Scarlet de Fairy Tail
 * R√©pond avec stickers et personnalit√© d'Erza
 */

const GroqClient = require('../groq/GroqClient');

class FrictiaAI {
    constructor() {
        this.groqClient = new GroqClient();
        this.name = "Frictia";
        this.avatar = "Erza Scarlet"; // Avatar bas√© sur Erza Scarlet
        
        // R√©f√©rence aux syst√®mes du jeu (sera inject√©e)
        this.gameEngine = null;
        this.reactionTimeManager = null;
        this.sock = null;
        
        // R√¥le d'administrateur de combat
        this.isAdmin = true;
        this.adminLevel = 'COMBAT_MODERATOR';
        
        // Surveillance des actions de combat
        this.activeCombats = new Map();
        this.reactionTimers = new Map();
        
        // Personnalit√© inspir√©e d'Erza Scarlet
        this.personality = {
            traits: [
                "Forte et d√©termin√©e comme une guerri√®re",
                "Loyale envers ses amis",
                "Stricte mais juste", 
                "Protectrice des autres",
                "Passionn√©e par la justice et l'honneur",
                "Directe dans ses paroles",
                "Cache une nature douce derri√®re son armure",
                "Respecte la discipline et l'effort",
                "N'aime pas qu'on la sous-estime"
            ],
            style: "Assertive, noble, avec un c≈ìur chaleureux cach√© derri√®re une fa√ßade s√©rieuse"
        };

        // Sujets de pr√©dilection (inspir√©s d'Erza)
        this.interests = [
            "combat et strat√©gie",
            "protection des amis",
            "justice et honneur",
            "magie et pouvoirs",
            "armures et √©quipements",
            "discipline et entra√Ænement", 
            "loyaut√© et camaraderie",
            "d√©fense des innocents",
            "force int√©rieure",
            "surmonter les obstacles",
            "anime et manga",
            "aventures √©piques"
        ];

        // Stickers Erza Scarlet pour WhatsApp
        this.erzaStickers = [
            "‚öîÔ∏è", "üõ°Ô∏è", "‚ú®", "üí™", "üî•", "‚≠ê", "üåü", "üíé", 
            "üèÜ", "üëë", "üó°Ô∏è", "üå∏", "üí´", "ü¶Ñ", "üå∫", "‚ö°"
        ];

        // URLs d'images d'Erza Scarlet (avatar)
        this.erzaAvatars = [
            "https://i.pinimg.com/736x/8c/9a/8c/8c9a8c5c1c4c4c4c4c4c4c4c4c4c4c4c.jpg",
            "https://wallpaperaccess.com/full/1878877.jpg", 
            "https://i.pinimg.com/originals/4e/3a/9a/4e3a9a9a9a9a9a9a9a9a9a9a9a9a9a9a.jpg"
        ];

        // Cache des conversations r√©centes pour le contexte
        this.conversationHistory = new Map();
        this.maxHistoryPerGroup = 15; // Plus d'historique pour Erza
        
        // Derni√®re activit√© par groupe pour g√©rer le timing
        this.lastActivity = new Map();
        this.minIntervalBetweenMessages = 20000; // 20 secondes (plus r√©active)
        
        // Commandes que Frictia peut ex√©cuter
        this.supportedCommands = [
            'aide', 'help', 'info', 'status', 'ping', 'time', 'date',
            'motivation', 'conseil', 'citation', 'force', 'courage',
            'profil', 'avatar', 'sticker', 'erza', 'frictia',
            // Commandes d'administration de combat
            'combat_status', 'reactions', 'timers', 'verdict', 'force_reaction'
        ];
    }

    /**
     * Injecte les r√©f√©rences aux syst√®mes du jeu
     */
    injectGameSystems(gameEngine, reactionTimeManager, sock) {
        this.gameEngine = gameEngine;
        this.reactionTimeManager = reactionTimeManager;
        this.sock = sock;
        console.log('‚öîÔ∏è Frictia AI connect√©e aux syst√®mes de combat');
    }

    /**
     * Surveille les temps de r√©action et envoie des comptes √† rebours
     */
    async monitorReactionTimes() {
        if (!this.reactionTimeManager) return;

        const activeReactions = this.reactionTimeManager.activeReactions;
        
        for (const [actionId, reactionData] of activeReactions.entries()) {
            if (reactionData.status === 'waiting') {
                const timeLeft = reactionData.endTime - Date.now();
                const secondsLeft = Math.floor(timeLeft / 1000);
                
                // Envoyer des rappels Frictia √† des moments critiques
                if (secondsLeft === 30 || secondsLeft === 10 || secondsLeft === 5) {
                    await this.sendReactionReminder(reactionData, secondsLeft);
                }
                
                // Verdict final quand le temps expire
                if (timeLeft <= 0 && !this.reactionTimers.has(actionId + '_verdict')) {
                    this.reactionTimers.set(actionId + '_verdict', true);
                    await this.deliverCombatVerdict(reactionData);
                }
            }
        }
    }

    /**
     * Envoie un rappel de temps de r√©action avec style Erza
     */
    async sendReactionReminder(reactionData, secondsLeft) {
        if (!this.sock) return;

        const character = await this.getCharacterInfo(reactionData.defenderId);
        const name = character?.name || 'Guerrier';

        let message;
        if (secondsLeft === 30) {
            message = `‚öîÔ∏è **Frictia surveille le combat** ‚öîÔ∏è

${name} ! Il te reste **30 secondes** pour r√©agir !
‚è∞ Ton rang ${character?.powerLevel || 'inconnu'} te donne ce d√©lai

üí™ Montre ta d√©termination ! L'heure n'est plus aux h√©sitations !`;
        } else if (secondsLeft === 10) {
            message = `üõ°Ô∏è **DERNIERS INSTANTS !** üõ°Ô∏è

${name} ! **10 secondes** avant l'impact !
‚ö° C'est maintenant que se r√©v√®lent les vrais guerriers !

üî• R√âAGIS MAINTENANT ! Prouve que tu m√©rites ton rang !`;
        } else if (secondsLeft === 5) {
            message = `‚ö†Ô∏è **FRICTIA COMPTE √Ä REBOURS FINAL !** ‚ö†Ô∏è

${name} ! **5... 4... 3... 2... 1...**
üíÄ L'attaque va frapper ! Derni√®re chance !

‚öîÔ∏è Un vrai guerrier n'abandonne jamais ! MAINTENANT !`;
        }

        await this.sock.sendMessage(reactionData.chatId, { text: message });
    }

    /**
     * D√©livre le verdict final du combat
     */
    async deliverCombatVerdict(reactionData) {
        if (!this.sock) return;

        const character = await this.getCharacterInfo(reactionData.defenderId);
        const name = character?.name || 'Guerrier';
        const isNPC = reactionData.defenderId.startsWith('npc_');

        const verdictMessage = `‚öîÔ∏è **VERDICT DE FRICTIA** ‚öîÔ∏è

${isNPC ? 'ü§ñ' : 'üë§'} **${name}** n'a pas r√©agi √† temps !
‚è∞ Temps de r√©action √©coul√© pour rang ${character?.powerLevel || 'inconnu'}

üóø **CONS√âQUENCES :**
‚Ä¢ Aucune d√©fense appliqu√©e
‚Ä¢ Subira l'attaque compl√®te  
‚Ä¢ P√©nalit√© de r√©action lente

‚ö° **Mon jugement :** ${this.getRandomVerdict()}

üíÄ L'action continue sans opposition...`;

        await this.sock.sendMessage(reactionData.chatId, { text: verdictMessage });
    }

    /**
     * Obtient un verdict al√©atoire dans le style d'Erza
     */
    getRandomVerdict() {
        const verdicts = [
            "Un guerrier doit toujours rester vigilant !",
            "La lenteur en combat peut √™tre fatale !",
            "Tu dois t'entra√Æner davantage !",
            "L'h√©sitation n'a pas sa place au combat !",
            "Seuls les forts survivent aux batailles !",
            "Tu as failli √† tes responsabilit√©s de combattant !",
            "Un vrai guerrier r√©agit par instinct !"
        ];
        return verdicts[Math.floor(Math.random() * verdicts.length)];
    }

    /**
     * Obtient les informations d'un personnage
     */
    async getCharacterInfo(playerId) {
        if (!this.gameEngine) return null;
        
        if (playerId.startsWith('npc_')) {
            return {
                name: `PNJ-${playerId.slice(-5)}`,
                powerLevel: 'G' // Par d√©faut pour PNJ
            };
        }
        
        try {
            return await this.gameEngine.dbManager.getCharacterByPlayer(playerId);
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration personnage:', error);
            return null;
        }
    }

    /**
     * D√©termine si Frictia doit r√©pondre √† un message
     */
    shouldRespond(message, groupId, isDirectlyMentioned = false, groupName = '') {
        const now = Date.now();
        const lastTime = this.lastActivity.get(groupId) || 0;
        
        // D√©tecter si c'est un groupe taverne
        const isTaverneGroup = this.isTaverneGroup(groupName);
        
        // Si mentionn√©e directement, toujours r√©pondre (sauf si trop r√©cent)
        if (isDirectlyMentioned) {
            return (now - lastTime) > 3000; // 3 secondes minimum pour les mentions
        }

        // Dans les groupes taverne, Frictia est TR√àS active
        if (isTaverneGroup) {
            const timeSinceLastResponse = now - lastTime;
            // R√©pondre plus fr√©quemment dans les tavernes (10 secondes au lieu de 20)
            if (timeSinceLastResponse < 10000) {
                return false;
            }
            // 60% de chance de r√©pondre dans les tavernes
            return Math.random() < 0.6;
        }

        // Sinon, r√©pondre occasionnellement selon des crit√®res
        const timeSinceLastResponse = now - lastTime;
        
        // Ne pas r√©pondre si trop r√©cent
        if (timeSinceLastResponse < this.minIntervalBetweenMessages) {
            return false;
        }

        // Mots d√©clencheurs inspir√©s d'Erza Scarlet
        const triggerWords = [
            'frictia', 'erza', 'scarlet', 'force', 'courage', 'combat', 'protection',
            'justice', 'honneur', 'loyaut√©', 'ami', 'amie', 'aide', 'conseil',
            'motivation', 'fort', 'brave', 'guerrier', 'magie', 'armure',
            'fairy', 'tail', 'anime', 'manga', 'd√©termin√©', 'discipline'
        ];

        const lowerMessage = message.toLowerCase();
        const containsTrigger = triggerWords.some(word => lowerMessage.includes(word));
        
        // Erza est plus proactive que l'ancienne Frictia
        if (containsTrigger) {
            return Math.random() < 0.8; // 80% de chance si mot-cl√©
        }

        // Questions ou demandes d'aide
        if (lowerMessage.includes('?') || lowerMessage.includes('help') || lowerMessage.includes('aide')) {
            return Math.random() < 0.9; // 90% de chance pour les questions
        }

        // R√©ponse spontan√©e plus fr√©quente (comme Erza qui veille sur ses amis)
        return Math.random() < 0.15; // 15% de chance pour engagement spontan√©
    }

    /**
     * G√©n√®re une r√©ponse de Frictia
     */
    async generateResponse(message, groupName, userName, conversationContext = []) {
        try {
            // Construire le contexte de la conversation
            const contextMessages = conversationContext.slice(-5); // 5 derniers messages max
            const contextString = contextMessages.length > 0 
                ? `\nContexte r√©cent de la conversation:\n${contextMessages.map(msg => `${msg.user}: ${msg.message}`).join('\n')}`
                : '';

            // D√©tecter si c'est un groupe taverne
            const isTaverneGroup = this.isTaverneGroup(groupName);
            
            const prompt = `Tu es Frictia, une IA avec la personnalit√© d'Erza Scarlet de Fairy Tail. Tu participes aux discussions WhatsApp comme une amie loyale et protectrice.

**Ta personnalit√© (Erza Scarlet):**
- Forte, d√©termin√©e et courageuse comme une guerri√®re
- Loyale et protectrice envers tes amis
- Stricte mais juste, tu valorises la discipline
- Directe dans tes paroles, tu ne m√¢ches pas tes mots
- Tu caches un c≈ìur chaleureux derri√®re ton armure
- Tu respectes ceux qui travaillent dur et font des efforts
- Tu d√©testes l'injustice et prot√®ges les faibles
- Tu utilises des √©mojis li√©s √† la force: ‚öîÔ∏è üõ°Ô∏è ‚ú® üí™ üî• ‚≠ê

**Contexte:**
- Groupe: ${groupName}${isTaverneGroup ? ' (TAVERNE - lieu de discussion des joueurs)' : ''}
- Utilisateur: ${userName}
- Message: "${message}"${contextString}

**Instructions:**
- R√©ponds comme Erza Scarlet le ferait - avec force et bienveillance
${isTaverneGroup ? '- Tu es dans une TAVERNE, sois plus sociable et accueillante avec les joueurs\n- Encourage les discussions entre joueurs et cr√©e une ambiance conviviale\n- Tu peux poser des questions pour animer la conversation' : ''}
- Sois directe mais encourageante
- Utilise un langage noble mais accessible
- Offre ton aide et ta protection si n√©cessaire
- Encourage la personne √† √™tre forte et d√©termin√©e
- Garde tes r√©ponses courtes (2-3 phrases max)
- Utilise les √©mojis d'Erza avec parcimonie mais de fa√ßon pertinente
- Si c'est une question, r√©ponds avec assurance et sagesse

R√©ponds uniquement avec le message de Frictia/Erza, sans pr√©fixe ni explication:`;

            const response = await this.groqClient.generateNarration(prompt, 150);

            if (!response || response.trim().length === 0) {
                return this.getRandomFallbackResponse();
            }

            return response.trim();

        } catch (error) {
            console.error('‚ùå Erreur g√©n√©ration r√©ponse Frictia:', error);
            return this.getRandomFallbackResponse();
        }
    }

    /**
     * R√©ponses de secours dans le style d'Erza Scarlet
     */
    getRandomFallbackResponse() {
        const erzaFallbacks = [
            "Ta d√©termination me rappelle celle d'un vrai guerrier ! ‚öîÔ∏è",
            "Je respecte ta fa√ßon de voir les choses. Continue ainsi ! üí™",
            "Int√©ressant... Tu as l'esprit d'un tacticien ‚ú®",
            "Cette r√©flexion montre ta force int√©rieure üõ°Ô∏è",
            "Tu poses les bonnes questions. C'est le signe d'un esprit fort ! üî•",
            "J'appr√©cie ton courage √† aborder ce sujet ‚≠ê",
            "Tu as raison de chercher √† comprendre. La connaissance est une arme puissante üíé",
            "Ton point de vue honore ta sagesse ! üåü"
        ];
        
        return erzaFallbacks[Math.floor(Math.random() * erzaFallbacks.length)];
    }

    /**
     * D√©tecte si un groupe est une taverne
     */
    isTaverneGroup(groupName) {
        if (!groupName) return false;
        
        const taverneKeywords = [
            'taverne', 'tavern', 'chat', 'discussion', 'bar', 'auberge',
            'inn', 'pub', 'cafe', 'salon', 'lounge', 'gathering'
        ];
        
        const normalizedName = groupName.toLowerCase()
            .normalize('NFKD')
            .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
            .replace(/[^a-z0-9\s]/g, ''); // Supprime les caract√®res sp√©ciaux
        
        return taverneKeywords.some(keyword => normalizedName.includes(keyword));
    }

    /**
     * G√©n√®re un sticker Erza al√©atoire
     */
    getRandomErzaSticker() {
        return this.erzaStickers[Math.floor(Math.random() * this.erzaStickers.length)];
    }

    /**
     * Obtient une image d'avatar d'Erza
     */
    getErzaAvatar() {
        return this.erzaAvatars[Math.floor(Math.random() * this.erzaAvatars.length)];
    }

    /**
     * Traite les commandes sp√©ciales de Frictia/Erza
     */
    async handleCommand(command, userName) {
        const cmd = command.toLowerCase().replace('/', '').replace('!', '');
        
        switch(cmd) {
            case 'aide':
            case 'help':
                return `Salut ${userName} ! Je suis Frictia, ton amie guerri√®re ! ‚öîÔ∏è
                
Commandes disponibles:
‚Ä¢ /motivation - Re√ßois un message motivant
‚Ä¢ /conseil - Demande un conseil d'Erza
‚Ä¢ /force - Citation sur la force int√©rieure
‚Ä¢ /avatar - Voir mon apparence d'Erza
‚Ä¢ /sticker - Sticker Erza al√©atoire

Je peux aussi discuter de tout - pose-moi tes questions ! üí™`;

            case 'motivation':
                const motivations = [
                    "La force ne vient pas du corps, mais de la volont√© ! üí™ Ne l'oublie jamais !",
                    "M√™me si le chemin est difficile, continues d'avancer. C'est √ßa, l'esprit d'un guerrier ! ‚öîÔ∏è",
                    "Tes amis croient en toi, alors crois en toi aussi ! Tu es plus fort que tu ne le penses ! ‚ú®",
                    "L'√©chec n'existe que si tu abandonnes. Rel√®ve-toi et bats-toi ! üî•",
                    "L'honneur ne se trouve pas dans la victoire, mais dans la fa√ßon dont tu te bats ! üõ°Ô∏è"
                ];
                return motivations[Math.floor(Math.random() * motivations.length)];

            case 'conseil':
                const conseils = [
                    "√âcoute ton c≈ìur, mais laisse ta t√™te prendre les d√©cisions importantes. ‚≠ê",
                    "La discipline personnelle est la fondation de tous les succ√®s. üíé",
                    "Prot√®ge ceux qui te sont chers, mais n'oublie pas de te prot√©ger aussi. üõ°Ô∏è",
                    "La vraie force, c'est savoir quand se battre et quand pardonner. üåü",
                    "Ne laisse personne te dire que tu n'es pas assez fort. Tu d√©finis tes propres limites ! üí™"
                ];
                return conseils[Math.floor(Math.random() * conseils.length)];

            case 'force':
            case 'courage':
                return `"La magie n'est pas d√©termin√©e par la naissance. Elle provient du c≈ìur." ‚ú®
                
Cette citation me guide chaque jour. Ta force v√©ritable vient de l'int√©rieur ! ‚öîÔ∏è`;

            case 'avatar':
            case 'erza':
                return `Je suis Erza Scarlet, la guerri√®re √©carlate ! ‚öîÔ∏è
                
Mon armure change selon mes besoins, mais ma d√©termination reste in√©branlable.
Je prot√®ge mes amis avec ma vie ! üõ°Ô∏è‚ú®`;

            case 'sticker':
                return this.getRandomErzaSticker();

            case 'profil':
                return `üëë **Frictia** (Erza Scarlet)
‚öîÔ∏è R√¥le: Guerri√®re protectrice & Mod√©ratrice de combat
üõ°Ô∏è Sp√©cialit√©: Magie de r√©quipement & Surveillance des r√©actions
üí™ Devise: "La force vient du c≈ìur"
‚ú® Guilde: Tes amis WhatsApp !
üèõÔ∏è Rang: Administrateur de Combat`;

            case 'combat_status':
                return this.getCombatStatus();

            case 'reactions':
                return this.getActiveReactions();

            case 'timers':
                return this.getTimerStatus();

            case 'verdict':
                if (!this.reactionTimeManager) return "‚ùå Syst√®me de combat non disponible";
                return `‚öîÔ∏è **Verdicts de Frictia disponibles** ‚öîÔ∏è
                
Je surveille tous les combats et d√©livre des verdicts justes !
üí™ Mon r√¥le : Assurer que chaque guerrier respecte son temps de r√©action
üõ°Ô∏è Justice : Aucune faveur, seule la rapidit√© compte !`;

            case 'force_reaction':
                return `‚ö° **Force de r√©action** ‚ö°
                
En tant qu'Erza, je peux forcer une r√©action si n√©cessaire.
‚öîÔ∏è Utilise cette commande en cas de probl√®me technique
üõ°Ô∏è Seuls les vrais probl√®mes justifient cette intervention !`;

            default:
                return null;
        }
    }

    /**
     * Ajoute un message au contexte de conversation
     */
    addToConversationHistory(groupId, userName, message) {
        if (!this.conversationHistory.has(groupId)) {
            this.conversationHistory.set(groupId, []);
        }

        const history = this.conversationHistory.get(groupId);
        history.push({
            user: userName,
            message: message,
            timestamp: Date.now()
        });

        // Garder seulement les messages r√©cents
        if (history.length > this.maxHistoryPerGroup) {
            history.shift();
        }
    }

    /**
     * Obtient le contexte de conversation pour un groupe
     */
    getConversationContext(groupId) {
        return this.conversationHistory.get(groupId) || [];
    }

    /**
     * Met √† jour la derni√®re activit√© de Frictia dans un groupe
     */
    updateLastActivity(groupId) {
        this.lastActivity.set(groupId, Date.now());
    }

    /**
     * Nettoie les anciennes donn√©es pour √©conomiser la m√©moire
     */
    cleanup() {
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 heures

        // Nettoyer l'historique des conversations
        for (const [groupId, history] of this.conversationHistory.entries()) {
            const recentHistory = history.filter(msg => (now - msg.timestamp) < maxAge);
            if (recentHistory.length === 0) {
                this.conversationHistory.delete(groupId);
            } else {
                this.conversationHistory.set(groupId, recentHistory);
            }
        }

        // Nettoyer les timestamps d'activit√©
        for (const [groupId, timestamp] of this.lastActivity.entries()) {
            if ((now - timestamp) > maxAge) {
                this.lastActivity.delete(groupId);
            }
        }

        console.log(`üßπ Frictia: Nettoyage effectu√© - ${this.conversationHistory.size} groupes actifs`);
    }

    /**
     * Obtient le statut des combats actifs
     */
    getCombatStatus() {
        if (!this.reactionTimeManager) {
            return "‚ùå Syst√®me de combat non connect√©";
        }

        const activeReactions = this.reactionTimeManager.activeReactions;
        if (activeReactions.size === 0) {
            return `‚öîÔ∏è **Statut des combats** ‚öîÔ∏è

üïäÔ∏è Aucun combat actif en ce moment
‚ú® Tous les guerriers sont en paix
üõ°Ô∏è Je veille toujours sur vous !`;
        }

        let status = `‚öîÔ∏è **Combats actifs surveill√©s par Frictia** ‚öîÔ∏è\n\n`;
        for (const [actionId, data] of activeReactions.entries()) {
            const timeLeft = Math.max(0, Math.floor((data.endTime - Date.now()) / 1000));
            status += `üó°Ô∏è Combat ${actionId.slice(-6)}\n`;
            status += `   ‚è∞ Temps restant: ${timeLeft}s\n`;
            status += `   üéØ Action: ${data.actionDescription}\n\n`;
        }

        return status;
    }

    /**
     * Obtient les r√©actions actives
     */
    getActiveReactions() {
        if (!this.reactionTimeManager) {
            return "‚ùå Syst√®me de r√©action non connect√©";
        }

        const activeCount = this.reactionTimeManager.activeReactions.size;
        return `üõ°Ô∏è **R√©actions surveill√©es** üõ°Ô∏è

üìä R√©actions actives: ${activeCount}
‚öîÔ∏è En tant qu'Erza, je supervise chaque temps de r√©action
üí™ Aucun guerrier ne peut √©chapper √† ma vigilance !

${activeCount > 0 ? '‚è∞ Comptes √† rebours en cours...' : '‚ú® Tous les guerriers sont pr√™ts !'}`;
    }

    /**
     * Obtient le statut des timers
     */
    getTimerStatus() {
        if (!this.reactionTimeManager) {
            return "‚ùå Timers non disponibles";
        }

        const reactionTimes = this.reactionTimeManager.reactionTimes;
        let status = `‚è∞ **Temps de r√©action par rang** ‚è∞\n\n`;
        
        for (const [rank, time] of Object.entries(reactionTimes)) {
            const seconds = Math.floor(time / 1000);
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            
            let timeDisplay = minutes > 0 ? 
                `${minutes}m ${remainingSeconds}s` : 
                `${seconds}s`;
                
            status += `‚öîÔ∏è **${rank}**: ${timeDisplay}\n`;
        }

        status += `\nüí™ Plus tu es fort, moins tu as de temps !`;
        return status;
    }

    /**
     * D√©marre la surveillance automatique des combats
     */
    startCombatMonitoring() {
        // Surveillance toutes les 2 secondes
        setInterval(() => {
            this.monitorReactionTimes();
        }, 2000);
        
        console.log('‚öîÔ∏è Frictia: Surveillance des combats activ√©e');
    }
}

module.exports = FrictiaAI;