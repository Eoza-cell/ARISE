
```javascript
/**
 * CounterAttackSystem - Syst√®me de contre-attaque et riposte automatique
 * G√®re les ripostes bas√©es sur le timing et la pr√©cision des d√©fenseurs
 */

class CounterAttackSystem {
    constructor(gameEngine) {
        this.gameEngine = gameEngine;
        this.activeCounters = new Map(); // actionId -> counterData
        
        // Fen√™tres de timing pour ripostes r√©ussies
        this.counterWindows = {
            'perfect': { min: 0, max: 0.2, damageMultiplier: 2.5, successRate: 1.0 }, // 0-20% du temps
            'good': { min: 0.2, max: 0.5, damageMultiplier: 1.8, successRate: 0.85 }, // 20-50%
            'normal': { min: 0.5, max: 0.75, damageMultiplier: 1.3, successRate: 0.6 }, // 50-75%
            'late': { min: 0.75, max: 0.95, damageMultiplier: 0.8, successRate: 0.3 }, // 75-95%
            'failed': { min: 0.95, max: 1.0, damageMultiplier: 0, successRate: 0 } // 95-100%
        };
        
        console.log('‚öîÔ∏è CounterAttackSystem initialis√© - Ripostes automatiques activ√©es');
    }
    
    /**
     * Enregistre une opportunit√© de contre-attaque
     */
    registerCounterOpportunity(actionId, attackerData, defenderData, attackDetails) {
        const counterData = {
            actionId,
            attacker: attackerData,
            defender: defenderData,
            attackDetails,
            startTime: Date.now(),
            windowDuration: this.calculateCounterWindow(defenderData.powerLevel),
            status: 'waiting'
        };
        
        this.activeCounters.set(actionId, counterData);
        
        console.log(`üõ°Ô∏è Opportunit√© de riposte enregistr√©e: ${actionId} (fen√™tre: ${counterData.windowDuration}ms)`);
        
        return counterData;
    }
    
    /**
     * Calcule la fen√™tre de contre-attaque bas√©e sur le rang
     */
    calculateCounterWindow(powerLevel) {
        const baseWindows = {
            'G': 360000, 'F': 300000, 'E': 240000, 'D': 180000,
            'C': 120000, 'B': 60000, 'A': 30000, 'S': 15000,
            'S+': 10000, 'SS': 8000, 'SSS': 5000, 'MONARQUE': 3000
        };
        
        return baseWindows[powerLevel] || baseWindows['G'];
    }
    
    /**
     * Traite une tentative de contre-attaque
     */
    async processCounterAttempt(actionId, counterAction, character) {
        const counterData = this.activeCounters.get(actionId);
        if (!counterData || counterData.status !== 'waiting') {
            return {
                success: false,
                reason: 'Aucune opportunit√© de riposte active'
            };
        }
        
        // Calculer le timing de la riposte
        const elapsed = Date.now() - counterData.startTime;
        const timingPercent = elapsed / counterData.windowDuration;
        
        // D√©terminer la qualit√© du timing
        const timing = this.evaluateTiming(timingPercent);
        
        // Analyser la pr√©cision de l'action de riposte
        const precision = this.gameEngine.precisionActionSystem.calculatePrecisionLevel(counterAction);
        
        // Calculer le succ√®s de la riposte
        const roll = Math.random();
        const success = roll < timing.successRate;
        
        counterData.status = success ? 'success' : 'failed';
        
        const result = {
            success,
            timing: timing.name,
            timingPercent: (timingPercent * 100).toFixed(1),
            precision,
            damageMultiplier: timing.damageMultiplier,
            elapsedTime: elapsed,
            message: this.generateCounterMessage(success, timing, precision, counterAction, counterData)
        };
        
        this.activeCounters.delete(actionId);
        
        console.log(`‚öîÔ∏è Riposte ${success ? 'R√âUSSIE' : '√âCHOU√âE'}: ${timing.name} (${result.timingPercent}%)`);
        
        return result;
    }
    
    /**
     * √âvalue la qualit√© du timing
     */
    evaluateTiming(percent) {
        for (const [name, window] of Object.entries(this.counterWindows)) {
            if (percent >= window.min && percent < window.max) {
                return { name, ...window };
            }
        }
        return { name: 'failed', ...this.counterWindows.failed };
    }
    
    /**
     * G√©n√®re un message d√©taill√© de riposte
     */
    generateCounterMessage(success, timing, precision, action, counterData) {
        const timeMs = Date.now() - counterData.startTime;
        const timeSec = (timeMs / 1000).toFixed(2);
        
        if (!success) {
            return `‚ùå **RIPOSTE √âCHOU√âE** ‚ùå

‚è±Ô∏è **Timing:** ${timing.name.toUpperCase()} (${timeSec}s de r√©action)
üéØ **Pr√©cision:** ${precision}
üíî **Rat√©:** Temps de r√©action insuffisant ou action impr√©cise

**Action tent√©e:** "${action}"
**Attaque adverse:** ${counterData.attackDetails.description || 'Attaque rapide'}

‚ö†Ô∏è Vous √™tes maintenant VULN√âRABLE √† l'attaque !`;
        }
        
        const bonusMessages = {
            'perfect': 'üåü RIPOSTE PARFAITE ! Timing exceptionnel !',
            'good': '‚úÖ BONNE RIPOSTE ! R√©action rapide et efficace',
            'normal': 'üëç RIPOSTE CORRECTE ! Timing acceptable',
            'late': '‚ö° RIPOSTE TARDIVE ! Juste √† temps'
        };
        
        return `‚ú® **RIPOSTE R√âUSSIE !** ‚ú®

${bonusMessages[timing.name] || ''}

‚è±Ô∏è **Timing:** ${timing.name.toUpperCase()} (${timeSec}s de r√©action)
üéØ **Pr√©cision:** ${precision}
üí• **Multiplicateur de d√©g√¢ts:** x${timing.damageMultiplier}
üìä **Taux de r√©ussite:** ${(timing.successRate * 100).toFixed(0)}%

**Riposte ex√©cut√©e:** "${action}"
**Distance estim√©e:** ${this.extractDistance(action) || '2-3 m√®tres'}
**Angle d'attaque:** ${this.extractAngle(action) || 'frontal'}

üéØ Votre contre-attaque b√©n√©ficie d'un bonus de ${((timing.damageMultiplier - 1) * 100).toFixed(0)}% !`;
    }
    
    /**
     * Extrait la distance d'une action
     */
    extractDistance(action) {
        const distanceMatch = action.match(/(\d+)\s*(m√®tre|m|cm)/i);
        return distanceMatch ? `${distanceMatch[1]}${distanceMatch[2]}` : null;
    }
    
    /**
     * Extrait l'angle d'une action
     */
    extractAngle(action) {
        const angleMatch = action.match(/(\d+)\s*(degr√©|¬∞)/i);
        if (angleMatch) return `${angleMatch[1]}¬∞`;
        
        if (/circulaire/i.test(action)) return 'circulaire (180¬∞)';
        if (/lat√©ral/i.test(action)) return 'lat√©ral (90¬∞)';
        if (/frontal|direct/i.test(action)) return 'frontal (0¬∞)';
        
        return null;
    }
    
    /**
     * Nettoie les opportunit√©s expir√©es
     */
    cleanExpiredCounters() {
        const now = Date.now();
        for (const [actionId, counterData] of this.activeCounters.entries()) {
            if (counterData.status === 'waiting' && 
                now - counterData.startTime > counterData.windowDuration) {
                counterData.status = 'expired';
                this.activeCounters.delete(actionId);
                console.log(`‚è∞ Opportunit√© de riposte expir√©e: ${actionId}`);
            }
        }
    }
}

module.exports = CounterAttackSystem;
```
