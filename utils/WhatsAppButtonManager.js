/**
 * Gestionnaire de boutons simul√©s via sondages WhatsApp
 * Permet de cr√©er des interfaces interactives avec des sondages √† option unique
 */

class WhatsAppButtonManager {
    constructor(sock) {
        this.sock = sock;
        this.buttonDelay = 300; // D√©lai entre l'envoi de chaque "bouton" (ms)
    }

    /**
     * Envoie un bouton unique simul√© (sondage √† 1 option)
     * @param {string} chatId - ID du chat WhatsApp
     * @param {string} buttonText - Texte du bouton 
     * @param {string} emoji - Emoji pour le bouton (optionnel)
     * @param {string} action - Action associ√©e au bouton
     */
    async sendButton(chatId, buttonText, emoji = '', action = null) {
        try {
            const pollName = emoji ? `${emoji} ${buttonText}` : buttonText;
            
            await this.sock.sendMessage(chatId, {
                poll: {
                    name: pollName,
                    values: ['‚úì'], // Une seule option - cliquer = activer
                    selectableCount: 1,
                    toAnnouncementGroup: false
                }
            });

            console.log(`üîò Bouton envoy√©: ${pollName}`);
            return true;
        } catch (error) {
            console.error('‚ùå Erreur envoi bouton:', error);
            return false;
        }
    }

    /**
     * Envoie plusieurs boutons pour cr√©er un menu interactif
     * @param {string} chatId - ID du chat 
     * @param {Array} buttons - Tableau d'objets boutons {text, emoji, action}
     * @param {string} title - Titre du menu (optionnel)
     */
    async sendButtonMenu(chatId, buttons, title = null) {
        try {
            // Envoyer le titre si fourni
            if (title) {
                await this.sock.sendMessage(chatId, { 
                    text: `üìã ${title}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ` 
                });
                await this.delay(500);
            }

            // Envoyer chaque bouton avec un d√©lai
            for (let i = 0; i < buttons.length; i++) {
                const button = buttons[i];
                await this.sendButton(chatId, button.text, button.emoji, button.action);
                
                // D√©lai entre les boutons (sauf le dernier)
                if (i < buttons.length - 1) {
                    await this.delay(this.buttonDelay);
                }
            }

            console.log(`‚úÖ Menu de ${buttons.length} boutons envoy√©`);
            return true;
        } catch (error) {
            console.error('‚ùå Erreur envoi menu boutons:', error);
            return false;
        }
    }

    /**
     * Cr√©e un menu principal pour le jeu RPG
     * @param {string} chatId - ID du chat
     * @param {Object} character - Personnage du joueur (optionnel)
     */
    async sendMainGameMenu(chatId, character = null) {
        const title = character ? 
            `Menu Principal - ${character.name}` : 
            'Menu Principal - Friction Ultimate';

        const buttons = [
            { text: 'Marcher', emoji: 'üö∂', action: 'walk' },
            { text: 'Combattre', emoji: '‚öîÔ∏è', action: 'combat' },
            { text: 'Inventaire', emoji: 'üéí', action: 'inventory' },
            { text: 'Comp√©tences', emoji: '‚ú®', action: 'skills' },
            { text: 'Magasin', emoji: 'üè™', action: 'shop' },
            { text: 'Profil', emoji: 'üë§', action: 'profile' },
            { text: 'Carte', emoji: 'üó∫Ô∏è', action: 'map' },
            { text: 'Aide', emoji: '‚ùì', action: 'help' }
        ];

        return await this.sendButtonMenu(chatId, buttons, title);
    }

    /**
     * Menu de d√©placement/actions
     * @param {string} chatId - ID du chat
     */
    async sendActionMenu(chatId) {
        const buttons = [
            { text: 'Nord', emoji: '‚¨ÜÔ∏è', action: 'move_north' },
            { text: 'Sud', emoji: '‚¨áÔ∏è', action: 'move_south' },
            { text: 'Est', emoji: '‚û°Ô∏è', action: 'move_east' },
            { text: 'Ouest', emoji: '‚¨ÖÔ∏è', action: 'move_west' },
            { text: 'Explorer', emoji: 'üîç', action: 'explore' },
            { text: 'Retour', emoji: '‚Ü©Ô∏è', action: 'back' }
        ];

        return await this.sendButtonMenu(chatId, buttons, 'Actions de D√©placement');
    }

    /**
     * Menu de combat
     * @param {string} chatId - ID du chat
     * @param {Array} techniques - Techniques disponibles
     */
    async sendCombatMenu(chatId, techniques = []) {
        const buttons = [
            { text: 'Attaque Simple', emoji: 'üëä', action: 'basic_attack' },
            { text: 'D√©fendre', emoji: 'üõ°Ô∏è', action: 'defend' }
        ];

        // Ajouter les techniques sp√©ciales
        techniques.forEach(technique => {
            buttons.push({
                text: technique.name,
                emoji: '‚ö°',
                action: `technique_${technique.id}`
            });
        });

        buttons.push({ text: 'Fuir', emoji: 'üèÉ', action: 'flee' });

        return await this.sendButtonMenu(chatId, buttons, 'Combat - Choisissez votre action');
    }

    /**
     * Menu de confirmation (Oui/Non)
     * @param {string} chatId - ID du chat
     * @param {string} question - Question √† poser
     */
    async sendConfirmationMenu(chatId, question) {
        await this.sock.sendMessage(chatId, { text: `‚ùì ${question}` });
        await this.delay(300);

        const buttons = [
            { text: 'Oui', emoji: '‚úÖ', action: 'confirm_yes' },
            { text: 'Non', emoji: '‚ùå', action: 'confirm_no' }
        ];

        return await this.sendButtonMenu(chatId, buttons);
    }

    /**
     * Menu personnalis√©
     * @param {string} chatId - ID du chat
     * @param {Array} options - Options du menu
     * @param {string} title - Titre du menu
     */
    async sendCustomMenu(chatId, options, title = 'Choisissez une option') {
        const buttons = options.map((option, index) => ({
            text: option.text || `Option ${index + 1}`,
            emoji: option.emoji || '‚ñ™Ô∏è',
            action: option.action || `option_${index}`
        }));

        return await this.sendButtonMenu(chatId, buttons, title);
    }

    /**
     * Menu num√©rot√© pour les listes (ex: royaumes, ordres)
     * @param {string} chatId - ID du chat
     * @param {Array} items - Liste d'√©l√©ments
     * @param {string} title - Titre du menu
     * @param {string} actionPrefix - Pr√©fixe pour l'action
     */
    async sendNumberedMenu(chatId, items, title = 'Liste', actionPrefix = 'select') {
        const buttons = items.map((item, index) => ({
            text: item.name || item.title || item,
            emoji: `${index + 1}Ô∏è‚É£`,
            action: `${actionPrefix}_${item.id || index}`
        }));

        return await this.sendButtonMenu(chatId, buttons, title);
    }

    /**
     * Menu de navigation avec pagination
     * @param {string} chatId - ID du chat
     * @param {Array} items - Tous les √©l√©ments
     * @param {number} page - Page actuelle (commence √† 0)
     * @param {number} itemsPerPage - √âl√©ments par page
     * @param {string} title - Titre du menu
     * @param {string} actionPrefix - Pr√©fixe pour l'action
     */
    async sendPaginatedMenu(chatId, items, page = 0, itemsPerPage = 6, title = 'Liste', actionPrefix = 'select') {
        const totalPages = Math.ceil(items.length / itemsPerPage);
        const startIndex = page * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, items.length);
        const pageItems = items.slice(startIndex, endIndex);

        // Boutons pour les √©l√©ments de la page actuelle
        const buttons = pageItems.map((item, index) => ({
            text: item.name || item.title || item,
            emoji: `${startIndex + index + 1}Ô∏è‚É£`,
            action: `${actionPrefix}_${item.id || startIndex + index}`
        }));

        // Boutons de navigation si n√©cessaire
        if (totalPages > 1) {
            const navButtons = [];
            
            if (page > 0) {
                navButtons.push({ text: 'Pr√©c√©dent', emoji: '‚¨ÖÔ∏è', action: `page_${page - 1}` });
            }
            
            if (page < totalPages - 1) {
                navButtons.push({ text: 'Suivant', emoji: '‚û°Ô∏è', action: `page_${page + 1}` });
            }

            buttons.push(...navButtons);
        }

        const fullTitle = totalPages > 1 ? 
            `${title} (Page ${page + 1}/${totalPages})` : 
            title;

        return await this.sendButtonMenu(chatId, buttons, fullTitle);
    }

    /**
     * D√©lai d'attente
     * @param {number} ms - Millisecondes d'attente
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Configure le d√©lai entre les boutons
     * @param {number} delay - D√©lai en millisecondes
     */
    setButtonDelay(delay) {
        this.buttonDelay = Math.max(100, Math.min(2000, delay)); // Entre 100ms et 2s
        console.log(`‚è±Ô∏è D√©lai boutons configur√©: ${this.buttonDelay}ms`);
    }
}

module.exports = WhatsAppButtonManager;