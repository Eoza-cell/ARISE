
const fs = require('fs').promises;
const path = require('path');

/**
 * Gestionnaire de narration immersive avec chronologie r√©aliste
 * et adaptation au niveau de puissance - NARRATEUR IMPARTIAL
 */
class ImmersiveNarrationManager {
    constructor(dbManager) {
        this.dbManager = dbManager;
        
        // √âchelle de puissance avec coefficients de difficult√©
        this.powerLevels = {
            'G': { base: 100, multiplier: 1.0, difficulty: 'd√©butant' },
            'F': { base: 150, multiplier: 1.2, difficulty: 'apprenti' },
            'E': { base: 200, multiplier: 1.5, difficulty: 'combattant' },
            'D': { base: 300, multiplier: 2.0, difficulty: 'guerrier aguerri' },
            'C': { base: 450, multiplier: 2.8, difficulty: 'v√©t√©ran exp√©riment√©' },
            'B': { base: 600, multiplier: 3.5, difficulty: 'ma√Ætre combattant' },
            'A': { base: 800, multiplier: 4.5, difficulty: 'l√©gende vivante' }
        };

        // Chronologie du monde (en heures)
        this.timeConstraints = {
            training: {
                basic: 8, // 8h pour un entra√Ænement de base
                intermediate: 24, // 1 jour pour technique interm√©diaire
                advanced: 72, // 3 jours pour technique avanc√©e
                mastery: 168 // 1 semaine pour ma√Ætriser
            },
            travel: {
                local: 1, // 1h d√©placement local (1 case)
                regional: 4, // 4h voyage r√©gional
                kingdom: 24, // 1 jour voyage entre royaumes
                dangerous: 8 // 8h en zone dangereuse
            },
            recovery: {
                minor: 4, // 4h pour r√©cup√©rer blessures mineures
                moderate: 12, // 12h pour blessures moyennes
                severe: 48, // 2 jours pour blessures graves
                critical: 168 // 1 semaine pour blessures critiques
            }
        };

        // Syst√®me de logique de d√©placement
        this.movementRules = {
            maxDistancePerAction: 1, // 1 case maximum par action
            terrainCosts: {
                plains: 1,
                road: 0.5,
                forest: 2,
                mountains: 3,
                desert: 2.5,
                swamp: 4,
                snow: 3,
                jungle: 2.5,
                wasteland: 3.5,
                ocean: 999, // Impossible sans navire
                river: 5, // N√©cessite de nager ou pont
                bridge: 0.8
            }
        };
    }

    /**
     * Valide la logique d'une action avant de g√©n√©rer la narration
     */
    validateActionLogic(character, action, newPosition = null) {
        const validation = {
            valid: true,
            issues: [],
            warnings: [],
            consequences: []
        };

        // V√©rifier les d√©placements
        if (newPosition && this.isMovementAction(action)) {
            const movementCheck = this.validateMovement(character, newPosition);
            if (!movementCheck.valid) {
                validation.valid = false;
                validation.issues.push(...movementCheck.issues);
            }
            validation.warnings.push(...movementCheck.warnings);
        }

        // V√©rifier les actions impossibles
        const impossibleCheck = this.checkImpossibleActions(action, character);
        if (!impossibleCheck.valid) {
            validation.valid = false;
            validation.issues.push(...impossibleCheck.issues);
        }

        // V√©rifier la coh√©rence avec l'inventaire
        const inventoryCheck = this.validateInventoryLogic(action, character);
        if (!inventoryCheck.valid) {
            validation.valid = false;
            validation.issues.push(...inventoryCheck.issues);
        }

        return validation;
    }

    /**
     * V√©rifie si une action implique un d√©placement
     */
    isMovementAction(action) {
        const movementKeywords = [
            'va', 'marche', 'cours', 'avance', 'recule', 'd√©place', 'bouge',
            'entre', 'sort', 'monte', 'descend', 'traverse', 'contourne'
        ];
        
        return movementKeywords.some(keyword => 
            action.toLowerCase().includes(keyword)
        );
    }

    /**
     * Valide un d√©placement selon les r√®gles logiques
     */
    validateMovement(character, newPosition) {
        const validation = {
            valid: true,
            issues: [],
            warnings: []
        };

        const currentPos = character.position || { x: 0, y: 0 };
        const distance = Math.abs(newPosition.x - currentPos.x) + Math.abs(newPosition.y - currentPos.y);

        // V√©rifier la distance maximale
        if (distance > this.movementRules.maxDistancePerAction) {
            validation.valid = false;
            validation.issues.push(`üîÖ IMMOBILIT√â - Distance trop grande: ${distance} cases. Maximum autoris√©: ${this.movementRules.maxDistancePerAction} case par action.`);
            validation.issues.push("üö∂ D√©placez-vous case par case pour respecter la logique du monde.");
        }

        // V√©rifier le terrain de destination
        const WorldMapGenerator = require('./WorldMapGenerator');
        const mapGen = new WorldMapGenerator();
        const targetTerrain = mapGen.getTerrainAt(newPosition.x, newPosition.y);

        if (targetTerrain === 'ocean') {
            validation.valid = false;
            validation.issues.push("üåä IMPOSSIBLE - Vous ne pouvez pas marcher sur l'oc√©an sans navire.");
        }

        if (targetTerrain === 'river') {
            validation.warnings.push("‚ö†Ô∏è Travers√©e de rivi√®re dangereuse - risque de noyade ou besoin de pont.");
        }

        // Calculer le temps de d√©placement r√©aliste
        const terrainCost = this.movementRules.terrainCosts[targetTerrain] || 2;
        const travelTime = Math.ceil(terrainCost * this.timeConstraints.travel.local);

        if (travelTime > 1) {
            validation.warnings.push(`‚è∞ D√©placement long: ${travelTime}h requis sur ce terrain (${targetTerrain}).`);
        }

        return validation;
    }

    /**
     * V√©rifie les actions logiquement impossibles
     */
    checkImpossibleActions(action, character) {
        const validation = {
            valid: true,
            issues: []
        };

        // Actions de t√©l√©portation interdites
        const teleportKeywords = [
            't√©l√©porte', 'appara√Æt', 'se mat√©rialise', 'surgit de nulle part',
            'instantan√©ment', 'soudain', 'd\'un coup', 'par magie'
        ];

        if (teleportKeywords.some(keyword => action.toLowerCase().includes(keyword))) {
            validation.valid = false;
            validation.issues.push("üö´ IMPOSSIBLE - Pas de t√©l√©portation. Tous les d√©placements doivent √™tre logiques.");
        }

        // V√©rifier les power-ups instantan√©s
        const powerupKeywords = [
            'gagne soudain', 'devient instantan√©ment', 'acquiert magiquement',
            'niveau up', 'power up', 'boost instantan√©'
        ];

        if (powerupKeywords.some(keyword => action.toLowerCase().includes(keyword))) {
            validation.valid = false;
            validation.issues.push("üö´ IMPOSSIBLE - Pas de power-ups instantan√©s. La progression doit √™tre logique.");
        }

        // V√©rifier les modifications d'inventaire impossibles
        const inventoryKeywords = [
            'trouve soudain', 'appara√Æt dans', 'mat√©rialise', 'invoque'
        ];

        if (inventoryKeywords.some(keyword => action.toLowerCase().includes(keyword))) {
            validation.valid = false;
            validation.issues.push("üö´ IMPOSSIBLE - Pas de cr√©ation d'objets instantan√©e. L'inventaire suit des r√®gles logiques.");
        }

        return validation;
    }

    /**
     * Valide la coh√©rence avec l'inventaire
     */
    validateInventoryLogic(action, character) {
        const validation = {
            valid: true,
            issues: []
        };

        // V√©rifier l'utilisation d'objets non poss√©d√©s
        const useKeywords = ['utilise', 'sort', 'prend', '√©quipe', 'boit', 'mange'];
        
        if (useKeywords.some(keyword => action.toLowerCase().includes(keyword))) {
            // Cette validation serait plus pouss√©e avec un vrai syst√®me d'inventaire
            validation.warnings = validation.warnings || [];
            validation.warnings.push("‚ö†Ô∏è V√©rification inventaire requise pour cette action.");
        }

        return validation;
    }

    /**
     * G√©n√®re une narration immersive IMPARTIALE bas√©e sur l'action et le niveau
     */
    async generateImmersiveNarration(character, action, location, enemies = []) {
        // Valider la logique de l'action AVANT la narration
        const actionValidation = this.validateActionLogic(character, action);
        
        if (!actionValidation.valid) {
            return {
                text: this.formatValidationErrors(actionValidation),
                valid: false
            };
        }

        const characterLevel = this.powerLevels[character.powerLevel] || this.powerLevels['G'];
        
        // Analyser le type d'action
        const actionType = this.analyzeActionType(action);
        
        // Cr√©er le contexte narratif
        const context = {
            character,
            action,
            location,
            enemies,
            powerLevel: characterLevel,
            actionType,
            worldTime: await this.getWorldTime(character.playerId),
            environmentalFactors: this.getEnvironmentalFactors(location, character),
            validation: actionValidation
        };

        // G√©n√©rer la narration selon le type
        let narrationResult;
        switch (actionType.category) {
            case 'movement':
                narrationResult = await this.generateMovementNarration(context);
                break;
            case 'combat':
                narrationResult = await this.generateCombatNarration(context);
                break;
            case 'exploration':
                narrationResult = await this.generateExplorationNarration(context);
                break;
            case 'training':
                narrationResult = await this.generateTrainingNarration(context);
                break;
            case 'social':
                narrationResult = await this.generateSocialNarration(context);
                break;
            default:
                narrationResult = await this.generateGenericNarration(context);
        }

        // Ajouter les avertissements de validation
        if (actionValidation.warnings.length > 0) {
            narrationResult.text += '\n\n‚ö†Ô∏è **AVERTISSEMENTS :**\n' + actionValidation.warnings.join('\n');
        }

        return narrationResult;
    }

    /**
     * Formate les erreurs de validation
     */
    formatValidationErrors(validation) {
        let errorText = '‚ùå **ACTION IMPOSSIBLE** ‚ùå\n\n';
        
        validation.issues.forEach(issue => {
            errorText += `${issue}\n`;
        });

        errorText += '\nüéØ **R√àGLES DU MONDE :**\n';
        errorText += '‚Ä¢ D√©placements case par case uniquement\n';
        errorText += '‚Ä¢ Pas de t√©l√©portation ou power-ups instantan√©s\n';
        errorText += '‚Ä¢ Toutes les actions doivent avoir une logique\n';
        errorText += '‚Ä¢ Le narrateur est impartial et factuel\n\n';
        errorText += 'üí° Reformulez votre action en respectant ces r√®gles.';

        return errorText;
    }

    /**
     * G√©n√®re une narration de d√©placement D√âTAILL√âE et IMMERSIVE
     */
    async generateMovementNarration(context) {
        const { character, action, location } = context;
        
        let narration = `üö∂ **‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê D√âPLACEMENT EN COURS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê** üö∂\n\n`;
        
        // Sc√®ne initiale d√©taill√©e
        narration += `üìç **ENVIRONNEMENT DE D√âPART**\n`;
        narration += `${character.name} se trouve actuellement dans ${location}.\n\n`;
        
        // Description du terrain avec d√©tails
        const currentPos = character.position || { x: 0, y: 0 };
        const WorldMapGenerator = require('./WorldMapGenerator');
        const mapGen = new WorldMapGenerator();
        const terrain = mapGen.getTerrainAt(currentPos.x, currentPos.y);
        
        narration += `üó∫Ô∏è **ANALYSE DU TERRAIN**\n`;
        narration += `‚Ä¢ Type : ${this.getTerrainDescription(terrain)}\n`;
        narration += `‚Ä¢ Texture du sol : ${this.getDetailedTerrainTexture(terrain)}\n`;
        narration += `‚Ä¢ Inclinaison : ${Math.floor(Math.random() * 15)}¬∞ vers ${['le nord', 'le sud', 'l\'est', 'l\'ouest'][Math.floor(Math.random() * 4)]}\n`;
        narration += `‚Ä¢ Friction estim√©e : ${this.getTerrainFriction(terrain)}\n`;
        narration += `‚Ä¢ Visibilit√© : ${this.getTerrainVisibility(terrain)} m√®tres\n\n`;
        
        // Action de d√©placement d√©taill√©e
        narration += `üéØ **ACTION DE D√âPLACEMENT**\n`;
        narration += `${action}\n\n`;
        
        // S√©quence de mouvement
        narration += `‚è±Ô∏è **S√âQUENCE DE MOUVEMENT**\n`;
        const distance = 5 + Math.floor(Math.random() * 15); // Distance al√©atoire r√©aliste
        const speed = 4 + Math.floor(Math.random() * 3); // Vitesse de marche km/h
        
        narration += `‚Ä¢ Distance √† parcourir : ${distance} m√®tres\n`;
        narration += `‚Ä¢ Vitesse de d√©placement : ${speed} km/h (${(speed / 3.6).toFixed(1)} m/s)\n`;
        narration += `‚Ä¢ Cadence de pas : ${80 + Math.floor(Math.random() * 40)} pas/minute\n`;
        narration += `‚Ä¢ Longueur de foul√©e : ${0.6 + Math.random() * 0.4} m√®tres\n\n`;
        
        // Chronologie du d√©placement
        const terrainCost = this.movementRules.terrainCosts[terrain] || 2;
        const travelTime = Math.ceil(terrainCost * this.timeConstraints.travel.local);
        const travelMinutes = travelTime * 60;
        
        narration += `üìä **CHRONOLOGIE D√âTAILL√âE**\n`;
        narration += `‚Ä¢ T+0 min : D√©but du d√©placement, orientation ${['nord', 'sud', 'est', 'ouest'][Math.floor(Math.random() * 4)]}\n`;
        narration += `‚Ä¢ T+${Math.floor(travelMinutes * 0.25)} min : Travers√©e du premier quart de distance\n`;
        narration += `‚Ä¢ T+${Math.floor(travelMinutes * 0.5)} min : Point m√©dian atteint, pause br√®ve 15s\n`;
        narration += `‚Ä¢ T+${Math.floor(travelMinutes * 0.75)} min : Trois quarts du parcours accomplis\n`;
        narration += `‚Ä¢ T+${travelMinutes} min : Destination atteinte\n\n`;
        
        // Conditions environnementales observ√©es
        narration += `üåç **CONDITIONS ENVIRONNEMENTALES**\n`;
        narration += this.getObservableConditions(terrain, location);
        narration += `\n`;
        
        // Observations sensorielles pendant le trajet
        narration += `üëÅÔ∏è **OBSERVATIONS PENDANT LE TRAJET**\n`;
        narration += `‚Ä¢ Vue : ${this.getVisualObservations(terrain)}\n`;
        narration += `‚Ä¢ Ou√Øe : ${this.getAudioObservations(terrain)}\n`;
        narration += `‚Ä¢ Odorat : ${this.getOlfactiveObservations(terrain)}\n`;
        narration += `‚Ä¢ Sensations : ${this.getTactileObservations(terrain)}\n\n`;
        
        // Impact physiologique
        narration += `‚öôÔ∏è **IMPACT PHYSIOLOGIQUE**\n`;
        narration += `‚Ä¢ D√©pense calorique : ${50 + Math.floor(Math.random() * 100)} kcal\n`;
        narration += `‚Ä¢ Fr√©quence cardiaque : ${70 + Math.floor(Math.random() * 30)} bpm\n`;
        narration += `‚Ä¢ Respiration : ${12 + Math.floor(Math.random() * 8)} cycles/minute\n`;
        narration += `‚Ä¢ Fatigue musculaire : +${Math.floor(Math.random() * 10)}%\n\n`;
        
        // Temps total
        narration += `‚è∞ **TEMPS TOTAL DE D√âPLACEMENT**\n`;
        narration += `‚Ä¢ Dur√©e estim√©e : ${travelTime}h (${travelMinutes} minutes)\n`;
        narration += `‚Ä¢ Coefficient terrain : x${terrainCost.toFixed(1)}\n`;

        // Temps √©coul√© r√©aliste
        await this.addWorldTime(character.playerId, 'travel', 'local', travelTime);

        return {
            text: narration,
            outcome: {
                type: 'movement',
                timeElapsed: travelTime,
                terrain: terrain,
                distance: distance
            },
            valid: true
        };
    }
    
    getDetailedTerrainTexture(terrain) {
        const textures = {
            plains: 'Herbe courte, l√©g√®rement humide, quelques cailloux √©pars',
            forest: 'Humus riche, racines apparentes, feuilles mortes',
            mountains: 'Roche granitique, graviers instables, mousses vertes',
            desert: 'Sable fin dor√©, l√©g√®rement chaud au toucher',
            swamp: 'Boue √©paisse, v√©g√©tation aquatique d√©compos√©e',
            snow: 'Neige compacte avec cristaux de glace',
            jungle: 'Terre riche et sombre, d√©bris v√©g√©taux denses',
            wasteland: 'Terre craquel√©e, poussi√®re grise, d√©bris m√©talliques',
            river: 'Galets lisses, sable humide en bordure',
            road: 'Pierre pav√©e us√©e, joints d\'herbe entre les dalles'
        };
        return textures[terrain] || 'Sol standard de composition mixte';
    }
    
    getTerrainFriction(terrain) {
        const frictions = {
            plains: 'Moyenne (coefficient 0.7)',
            forest: 'Variable (coefficient 0.5-0.8)',
            mountains: 'Faible (coefficient 0.4)',
            desert: 'Tr√®s faible (coefficient 0.3)',
            swamp: 'Minimale (coefficient 0.2)',
            snow: 'Faible (coefficient 0.3)',
            jungle: 'Moyenne-√©lev√©e (coefficient 0.6)',
            wasteland: 'Moyenne (coefficient 0.5)',
            river: 'Tr√®s faible si mouill√© (coefficient 0.2)',
            road: '√âlev√©e (coefficient 0.9)'
        };
        return frictions[terrain] || 'Coefficient 0.5';
    }
    
    getTerrainVisibility(terrain) {
        const visibility = {
            plains: 500 + Math.floor(Math.random() * 500),
            forest: 20 + Math.floor(Math.random() * 30),
            mountains: 800 + Math.floor(Math.random() * 700),
            desert: 1000 + Math.floor(Math.random() * 1000),
            swamp: 30 + Math.floor(Math.random() * 40),
            snow: 200 + Math.floor(Math.random() * 300),
            jungle: 10 + Math.floor(Math.random() * 20),
            wasteland: 300 + Math.floor(Math.random() * 400),
            river: 100 + Math.floor(Math.random() * 200),
            road: 400 + Math.floor(Math.random() * 600)
        };
        return visibility[terrain] || 150;
    }
    
    getVisualObservations(terrain) {
        const observations = {
            plains: 'Horizon d√©gag√©, ciel bleu parsem√© de nuages blancs, ombres longues projet√©es par le soleil',
            forest: 'Canop√©e dense filtrant la lumi√®re, jeux d\'ombres et de lumi√®re, mouvements de branches',
            mountains: 'Pics rocheux au loin, roches aux teintes grises et brunes, neige sur sommets',
            desert: 'Dunes ondulantes dor√©es, mirages thermiques √† l\'horizon, ciel d\'azur intense',
            swamp: 'Eau stagnante verd√¢tre, brumes basses, v√©g√©tation aquatique √©mergente'
        };
        return observations[terrain] || 'Paysage environnant visible avec clart√© mod√©r√©e';
    }
    
    getAudioObservations(terrain) {
        const sounds = {
            plains: 'Bruissement d\'herbes au vent, chants d\'oiseaux lointains, silence paisible',
            forest: 'Craquements de branches, p√©piements d\'oiseaux, froissement de feuilles',
            mountains: '√âcho des pas sur roche, sifflement du vent, roulement de pierres',
            desert: 'Silence presque total, l√©ger sifflement du vent sur les dunes',
            swamp: 'Croassements de grenouilles, clapotis d\'eau, bourdonnements d\'insectes'
        };
        return sounds[terrain] || 'Sons ambiants typiques du terrain';
    }
    
    getOlfactiveObservations(terrain) {
        const smells = {
            plains: 'Odeur d\'herbe fra√Æche, senteurs florales l√©g√®res',
            forest: 'Parfum d\'humus riche, ar√¥me de r√©sine de pins',
            mountains: 'Air pur et frais, l√©g√®re odeur min√©rale',
            desert: 'Air sec sans odeur particuli√®re, chaleur palpable',
            swamp: 'Odeur de v√©g√©tation en d√©composition, humidit√© marqu√©e'
        };
        return smells[terrain] || 'Odeurs neutres de l\'environnement';
    }
    
    getTactileObservations(terrain) {
        const sensations = {
            plains: 'Sol ferme sous les pieds, brise l√©g√®re sur la peau',
            forest: 'Humidit√© ambiante perceptible, fra√Æcheur de l\'ombre',
            mountains: 'Air frais et sec, sol dur et in√©gal',
            desert: 'Chaleur intense rayonnante, air sec ass√©chant',
            swamp: 'Humidit√© collante, sol mou et instable'
        };
        return sensations[terrain] || 'Sensations physiques de marche standard';
    }

    /**
     * Description factuelle du terrain
     */
    getTerrainDescription(terrain) {
        const descriptions = {
            plains: 'Plaines ouvertes, terrain stable',
            forest: 'V√©g√©tation dense, visibilit√© r√©duite',
            mountains: 'Relief escarp√©, effort physique accru',
            desert: 'Sable mouvant, chaleur intense',
            swamp: 'Sol instable, progression difficile',
            snow: 'Surface glissante, froid mordant',
            jungle: 'V√©g√©tation tropicale dense',
            wasteland: 'Terrain d√©sol√©, d√©bris nombreux',
            river: 'Cours d\'eau, travers√©e n√©cessaire',
            road: 'Voie am√©nag√©e, progression facilit√©e'
        };
        
        return descriptions[terrain] || 'Terrain non r√©pertori√©';
    }

    /**
     * Conditions observables de mani√®re factuelle
     */
    getObservableConditions(terrain, location) {
        let conditions = 'üìä **Conditions observ√©es :**\n';
        
        // Facteurs mesurables selon le terrain
        if (terrain === 'mountains') {
            conditions += '‚Ä¢ Altitude √©lev√©e d√©tect√©e\n';
            conditions += '‚Ä¢ Temp√©rature en baisse mesur√©e\n';
            conditions += '‚Ä¢ Effort cardiaque accru observ√©\n';
        } else if (terrain === 'swamp') {
            conditions += '‚Ä¢ Humidit√© atmosph√©rique √©lev√©e\n';
            conditions += '‚Ä¢ Sol instable sous les pieds\n';
            conditions += '‚Ä¢ Bruits aquatiques perceptibles\n';
        } else if (terrain === 'desert') {
            conditions += '‚Ä¢ Temp√©rature √©lev√©e mesur√©e\n';
            conditions += '‚Ä¢ Visibilit√© r√©duite par la poussi√®re\n';
            conditions += '‚Ä¢ D√©shydratation progressive observ√©e\n';
        } else {
            conditions += '‚Ä¢ Conditions de d√©placement standards\n';
            conditions += '‚Ä¢ Visibilit√© normale maintenue\n';
        }

        return conditions;
    }

    /**
     * G√©n√®re une narration de combat D√âTAILL√âE et IMMERSIVE
     */
    async generateCombatNarration(context) {
        const { character, action, enemies, powerLevel } = context;
        
        let narration = `‚öîÔ∏è **‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ENGAGEMENT COMBAT ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê** ‚öîÔ∏è\n\n`;
        
        // Description de la sc√®ne initiale
        narration += `üìç **SC√àNE DE COMBAT**\n`;
        narration += `${character.name} se trouve dans ${context.location}.\n`;
        
        const environmentalFactors = this.getEnvironmentalFactors(context.location, character);
        narration += `üå§Ô∏è M√©t√©o : ${environmentalFactors.weather} | Moment : ${environmentalFactors.timeOfDay}\n`;
        narration += `üó∫Ô∏è Terrain : ${environmentalFactors.combat}\n\n`;
        
        // √âtat d√©taill√© du combattant
        narration += `üë§ **√âTAT DU COMBATTANT**\n`;
        narration += `‚Ä¢ Nom : ${character.name} (Grade ${character.powerLevel} - ${powerLevel.difficulty})\n`;
        narration += `‚Ä¢ Niveau : ${character.level}\n`;
        narration += `‚Ä¢ Vie : ${character.currentLife}/${character.maxLife} PV (${Math.floor((character.currentLife/character.maxLife)*100)}%)\n`;
        narration += `‚Ä¢ √ânergie : ${character.currentEnergy}/${character.maxEnergy} (${Math.floor((character.currentEnergy/character.maxEnergy)*100)}%)\n`;
        narration += `‚Ä¢ Position : Debout, stance de combat, poids r√©parti √† 60% sur jambe avant\n`;
        narration += `‚Ä¢ Distance adversaire : ${2 + Math.floor(Math.random() * 4)} m√®tres\n\n`;
        
        // Action d√©taill√©e avec s√©quence temporelle
        narration += `‚öîÔ∏è **S√âQUENCE D'ACTION D√âTAILL√âE**\n`;
        narration += `üéØ Action : ${action}\n\n`;
        
        // D√©composition temporelle de l'action
        narration += `‚è±Ô∏è **CHRONOLOGIE (s√©quence micro-temporelle)**\n`;
        narration += `‚Ä¢ T+0.0s : ${character.name} initie le mouvement\n`;
        narration += `‚Ä¢ T+0.3s : Transfert du poids vers l'avant (70% jambe avant)\n`;
        narration += `‚Ä¢ T+0.6s : Rotation du tronc √† 35¬∞ dans le sens horaire\n`;
        narration += `‚Ä¢ T+0.9s : Bras en extension, vitesse 12 m/s\n`;
        narration += `‚Ä¢ T+1.2s : Point d'impact atteint\n\n`;
        
        // Descriptions sensorielles
        narration += `üëÅÔ∏è **OBSERVATIONS SENSORIELLES**\n`;
        narration += `‚Ä¢ Vue : Trajectoire du mouvement clairement visible, l√©g√®re tra√Æn√©e de poussi√®re\n`;
        narration += `‚Ä¢ Ou√Øe : Sifflement de l'air d√©plac√©, son mat de l'impact\n`;
        narration += `‚Ä¢ Toucher : Vibration ressentie dans les articulations, r√©sistance au contact\n\n`;
        
        // R√©sultat du combat avec d√©tails biom√©caniques
        const combatOutcome = this.calculateRealisticCombatOutcome(character, enemies, action);
        narration += `üìä **R√âSULTAT DE L'ENGAGEMENT**\n`;
        narration += `${combatOutcome.description}\n\n`;
        
        // Analyse biom√©canique de l'impact
        narration += `‚öôÔ∏è **ANALYSE BIOM√âCANIQUE**\n`;
        narration += `‚Ä¢ Force d'impact estim√©e : ${50 + Math.floor(Math.random() * 100)} Newtons\n`;
        narration += `‚Ä¢ Angle d'incidence : ${30 + Math.floor(Math.random() * 60)}¬∞\n`;
        narration += `‚Ä¢ Zone de contact : ${2 + Math.floor(Math.random() * 5)} cm¬≤\n`;
        narration += `‚Ä¢ D√©formation mesur√©e : ${1 + Math.floor(Math.random() * 3)} mm\n\n`;
        
        // Cons√©quences d√©taill√©es
        narration += `üìâ **CONS√âQUENCES MESUR√âES**\n`;
        narration += `‚Ä¢ Perte de vie : ${combatOutcome.healthLoss} PV\n`;
        narration += `‚Ä¢ D√©pense d'√©nergie : ${combatOutcome.energyLoss} points\n`;
        narration += `‚Ä¢ Fatigue musculaire : +${Math.floor(Math.random() * 15)}%\n`;
        narration += `‚Ä¢ Temp√©rature corporelle : +${0.5 + Math.random()}¬∞C\n`;
        narration += `‚Ä¢ Fr√©quence cardiaque : ${120 + Math.floor(Math.random() * 40)} bpm\n\n`;
        
        // Dur√©e totale
        const timeElapsed = this.calculateCombatTime(action, enemies.length);
        narration += `‚è∞ **DUR√âE TOTALE DE L'ENGAGEMENT** : ${timeElapsed} minutes\n`;
        narration += `‚è±Ô∏è **TEMPS R√âEL √âCOUL√â** : ${Math.floor(timeElapsed * 60)} secondes\n`;
        
        // Mettre √† jour les statistiques
        await this.updateCharacterAfterCombat(character, combatOutcome);

        return {
            text: narration,
            outcome: combatOutcome,
            timeElapsed: timeElapsed,
            valid: true
        };
    }

    /**
     * Calcule un r√©sultat de combat r√©aliste et factuel
     */
    calculateRealisticCombatOutcome(character, enemies, action) {
        const playerLevel = this.powerLevels[character.powerLevel];
        
        // Calcul factuel bas√© sur les statistiques
        const baseSuccessRate = Math.min(0.8, playerLevel.base / 200); // Maximum 80% de r√©ussite
        const randomFactor = 0.7 + (Math.random() * 0.6); // Facteur al√©atoire r√©aliste
        const finalRate = baseSuccessRate * randomFactor;
        
        let outcome;
        if (finalRate > 0.7) {
            outcome = {
                result: 'success',
                description: `Action ex√©cut√©e avec succ√®s. Technique appliqu√©e efficacement.`,
                healthLoss: Math.floor(character.maxLife * 0.05), // D√©g√¢ts minimes m√™me en cas de succ√®s
                energyLoss: Math.floor(character.maxEnergy * 0.15)
            };
        } else if (finalRate > 0.5) {
            outcome = {
                result: 'partial',
                description: `Action partiellement r√©ussie. R√©sultat mitig√© observ√©.`,
                healthLoss: Math.floor(character.maxLife * 0.15),
                energyLoss: Math.floor(character.maxEnergy * 0.25)
            };
        } else if (finalRate > 0.3) {
            outcome = {
                result: 'failure',
                description: `Action √©chou√©e. Technique mal ex√©cut√©e ou contr√©e.`,
                healthLoss: Math.floor(character.maxLife * 0.25),
                energyLoss: Math.floor(character.maxEnergy * 0.35)
            };
        } else {
            outcome = {
                result: 'critical_failure',
                description: `√âchec critique observ√©. Erreur tactique majeure commise.`,
                healthLoss: Math.floor(character.maxLife * 0.4),
                energyLoss: Math.floor(character.maxEnergy * 0.5)
            };
        }
        
        return outcome;
    }

    /**
     * G√©n√®re une narration d'exploration factuelle
     */
    async generateExplorationNarration(context) {
        const { character, action, location } = context;
        
        let narration = `üîç **EXPLORATION EN COURS**\n\n`;
        
        // Description environnementale factuelle
        narration += this.getFactualLocationDescription(location, character);
        
        // Action sp√©cifique
        narration += `\nüéØ **Action :** ${character.name} ${action.toLowerCase()}\n\n`;
        
        // Observations factuelles
        const explorationOutcome = this.generateFactualExplorationOutcome(character, action, location);
        narration += `üìù **Observations :**\n${explorationOutcome.description}\n\n`;
        
        // Temps √©coul√© mesur√©
        const timeCategory = explorationOutcome.dangerous ? 'dangerous' : 'local';
        await this.addWorldTime(character.playerId, 'travel', timeCategory);
        
        return {
            text: narration,
            outcome: explorationOutcome,
            valid: true
        };
    }

    /**
     * Description factuelle des lieux
     */
    getFactualLocationDescription(location, character) {
        const descriptions = {
            'Valorhall': `Zone urbaine identifi√©e : Valorhall. Architecture militaire observ√©e. Activit√© commerciale d√©tect√©e.`,
            'For√™t Sombre': `Environnement forestier dense. Luminosit√© r√©duite mesur√©e. Bruits de faune perceptibles.`,
            'Montagnes du Nord': `Relief montagneux confirm√©. Temp√©rature en baisse. Altitude √©lev√©e d√©tect√©e.`
        };
        
        return descriptions[location] || `${character.name} se trouve dans ${location}. Environnement en cours d'analyse.`;
    }

    /**
     * G√©n√®re des r√©sultats d'exploration factuels
     */
    generateFactualExplorationOutcome(character, action, location) {
        const outcomes = [
            {
                description: `Traces de passage r√©cent d√©tect√©es. Empreintes fra√Æches identifi√©es sur le sol.`,
                discovery: 'traces',
                dangerous: false
            },
            {
                description: `Mouvement suspect d√©tect√© dans le p√©rim√®tre. Prudence recommand√©e.`,
                discovery: 'movement',
                dangerous: true
            },
            {
                description: `Structure abandonn√©e localis√©e. Signes d'occupation r√©cente observ√©s.`,
                discovery: 'structure',
                dangerous: false
            }
        ];
        
        return outcomes[Math.floor(Math.random() * outcomes.length)];
    }

    // M√©thodes utilitaires pour la gestion du temps et des facteurs environnementaux
    async addWorldTime(playerId, category, type, customTime = null) {
        const timeToAdd = customTime || this.timeConstraints[category][type];
        const currentTime = await this.getWorldTime(playerId);
        const newTime = currentTime + timeToAdd;
        
        await this.dbManager.setTemporaryData(playerId, 'world_time', newTime);
        
        console.log(`‚è∞ Temps ajout√©: ${timeToAdd}h (${category}/${type})`);
    }

    async getWorldTime(playerId) {
        const worldTime = await this.dbManager.getTemporaryData(playerId, 'world_time');
        return worldTime || 0;
    }

    analyzeActionType(action) {
        const actionLower = action.toLowerCase();
        
        const movementKeywords = ['va', 'marche', 'cours', 'avance', 'recule', 'd√©place', 'bouge', 'entre', 'sort'];
        const combatKeywords = ['attaque', 'frappe', 'combat', 'se bat', '√©p√©e', 'lame', 'coup', 'riposte'];
        const explorationKeywords = ['explore', 'cherche', 'fouille', 'examine', 'regarde', 'inspecte'];
        const trainingKeywords = ['entra√Æne', 'pratique', 'm√©dite', '√©tude', 'apprend'];
        const socialKeywords = ['parle', 'demande', 'salue', 'dit', 'questionne', 'discute'];

        let category = 'generic';
        let intensity = 'low';
        let risk = 'safe';

        if (movementKeywords.some(keyword => actionLower.includes(keyword))) {
            category = 'movement';
            intensity = 'low';
            risk = 'safe';
        } else if (combatKeywords.some(keyword => actionLower.includes(keyword))) {
            category = 'combat';
            intensity = 'high';
            risk = 'dangerous';
        } else if (explorationKeywords.some(keyword => actionLower.includes(keyword))) {
            category = 'exploration';
            intensity = 'medium';
            risk = 'moderate';
        } else if (trainingKeywords.some(keyword => actionLower.includes(keyword))) {
            category = 'training';
            intensity = 'medium';
            risk = 'safe';
        } else if (socialKeywords.some(keyword => actionLower.includes(keyword))) {
            category = 'social';
            intensity = 'low';
            risk = 'safe';
        }

        return { category, intensity, risk };
    }

    getEnvironmentalFactors(location, character) {
        return {
            combat: this.getCombatEnvironmentalFactor(location),
            exploration: this.getExplorationEnvironmentalFactor(location),
            weather: this.getCurrentWeather(),
            timeOfDay: this.getTimeOfDay(character.playerId)
        };
    }

    getCombatEnvironmentalFactor(location) {
        const factors = {
            'Valorhall': 'Terrain stable, visibilit√© correcte',
            'For√™t Sombre': 'Obstacles naturels, visibilit√© limit√©e',
            'Montagnes du Nord': 'Terrain accident√©, risque de glissade'
        };
        
        return factors[location] || 'Conditions standard';
    }

    getExplorationEnvironmentalFactor(location) {
        return `Environnement ${location} - conditions mesur√©es`;
    }

    getCurrentWeather() {
        const weathers = ['Clair', 'Nuageux', 'Brumeux', 'Venteux'];
        return weathers[Math.floor(Math.random() * weathers.length)];
    }

    async getTimeOfDay(playerId) {
        const worldTime = await this.getWorldTime(playerId);
        const hourOfDay = worldTime % 24;
        
        if (hourOfDay < 6) return 'Aube';
        if (hourOfDay < 12) return 'Matin';
        if (hourOfDay < 18) return 'Apr√®s-midi';
        return 'Soir';
    }

    calculateCombatTime(action, enemyCount) {
        const baseTime = 2; // 2 minutes de base
        const actionComplexity = action.length > 50 ? 1.5 : 1;
        const enemyFactor = enemyCount * 1.2;
        
        return Math.floor(baseTime * actionComplexity * enemyFactor);
    }

    async updateCharacterAfterCombat(character, outcome) {
        const newLife = Math.max(1, character.currentLife - outcome.healthLoss);
        const newEnergy = Math.max(0, character.currentEnergy - outcome.energyLoss);
        
        await this.dbManager.updateCharacter(character.id, {
            currentLife: newLife,
            currentEnergy: newEnergy
        });
    }

    async generateGenericNarration(context) {
        const { character, action } = context;
        
        let narration = `üìã **ACTION OBSERV√âE**\n\n`;
        narration += `${character.name} : ${action}\n\n`;
        narration += `Action not√©e et enregistr√©e dans le contexte de ${context.location}.`;
        
        return {
            text: narration,
            outcome: { type: 'generic' },
            valid: true
        };
    }

    async generateTrainingNarration(context) {
        return this.generateGenericNarration(context);
    }

    async generateSocialNarration(context) {
        return this.generateGenericNarration(context);
    }
}

module.exports = ImmersiveNarrationManager;
