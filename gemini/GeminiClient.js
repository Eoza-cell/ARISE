
const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiClient {
    constructor() {
        this.isAvailable = false;
        
        try {
            if (!process.env.GEMINI_API_KEY) {
                console.log('‚ö†Ô∏è GEMINI_API_KEY non configur√©e - IA d√©sactiv√©e');
                return;
            }
            
            this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
            this.imageModel = this.genAI.getGenerativeModel({ 
                model: "gemini-2.0-flash-experimental",
                generationConfig: {
                    responseMimeType: "image/png"
                }
            });
            this.isAvailable = true;
            console.log('‚úÖ GeminiClient initialis√© avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation de GeminiClient:', error.message);
            console.log('‚ö†Ô∏è Le bot fonctionnera en mode fallback sans IA');
        }
    }

    async generateNarration(context) {
        if (!this.isAvailable) {
            return "Le narrateur semble momentan√©ment absent. L'action continue sans description d√©taill√©e.";
        }
        
        try {
            const prompt = this.buildNarrationPrompt(context);
            
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            return response.text();
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de narration:', error);
            return "Le narrateur semble momentan√©ment absent. L'action continue sans description d√©taill√©e.";
        }
    }

    async generateCombatNarration(combatContext) {
        if (!this.isAvailable) {
            return "Le combat se d√©roule dans un tourbillon d'acier et de magie.";
        }
        
        try {
            const prompt = this.buildCombatPrompt(combatContext);
            
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            return response.text();
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de narration de combat:', error);
            return "Le combat se d√©roule dans un tourbillon d'acier et de magie.";
        }
    }

    async generateCharacterResponse(character, situation, playerAction) {
        if (!this.isAvailable) {
            return "Les PNJ semblent fig√©s dans le temps...";
        }
        
        try {
            const prompt = this.buildCharacterResponsePrompt(character, situation, playerAction);
            
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            return response.text();
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration de r√©ponse de personnage:', error);
            return "Les PNJ semblent fig√©s dans le temps...";
        }
    }

    async generateImage(prompt, outputPath) {
        if (!this.isAvailable) {
            console.log('‚ö†Ô∏è Gemini AI non disponible pour la g√©n√©ration d\'images');
            return null;
        }
        
        try {
            console.log('üé® G√©n√©ration d\'image avec Gemini AI:', prompt.substring(0, 50) + '...');
            
            // Pour l'instant, Gemini 2.0 image generation API est instable
            // Retourner null pour utiliser le fallback Canvas
            console.log('‚ö†Ô∏è Gemini image generation d√©sactiv√© temporairement (API instable)');
            return null;
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration d\'image:', error.message);
            return null;
        }
    }

    async generateText(prompt, context = {}) {
        if (!this.isAvailable) {
            return {
                text: `ü§ñ R√©ponse automatique : "${prompt}"\n\nLe syst√®me d'IA Gemini sera int√©gr√© prochainement.`
            };
        }
        
        try {
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            return {
                text: response.text()
            };
        } catch (error) {
            console.error('‚ùå Erreur Gemini:', error);
            return {
                text: '‚ùå Erreur lors de la g√©n√©ration de r√©ponse IA.'
            };
        }
    }

    buildNarrationPrompt(context) {
        const { character, location, action, gameState } = context;
        
        return `Tu es le narrateur omniscient du monde de FRICTION ULTIMATE, un univers m√©di√©val-technologique impitoyable.

CONTEXTE:
- Personnage: ${character.name} (${character.gender === 'male' ? 'Homme' : 'Femme'})
- Royaume: ${character.kingdom}
- Ordre: ${character.order || 'Aucun'}
- Niveau: ${character.level} (Puissance ${character.powerLevel})
- Localisation: ${character.currentLocation}
- Vie: ${character.currentLife}/${character.maxLife}
- √ânergie: ${character.currentEnergy}/${character.maxEnergy}

ACTION DU JOUEUR: "${action}"

R√àGLES DE NARRATION:
1. Tu d√©cris SEULEMENT les cons√©quences de l'action, pas l'action elle-m√™me
2. Le monde r√©agit de mani√®re r√©aliste et souvent hostile
3. Chaque action a des cons√©quences pr√©cises (d√©g√¢ts, fatigue, etc.)
4. Les PNJ agissent ind√©pendamment et intelligemment
5. L'environnement est dangereux et en mouvement constant
6. Utilise un style narratif immersif √† la deuxi√®me personne ("Tu...")
7. Reste fid√®le au lore des royaumes et ordres
8. Applique strictement le syst√®me de friction (${character.frictionLevel})

D√©cris les cons√©quences de cette action en 2-3 phrases maximum, avec pr√©cision et r√©alisme.`;
    }

    buildCombatPrompt(combatContext) {
        const { attacker, target, attack, environment } = combatContext;
        
        return `Tu es le narrateur de combat de FRICTION ULTIMATE. D√©cris le r√©sultat de cette attaque:

ATTAQUANT: ${attacker.name} (${attacker.powerLevel})
- Vie: ${attacker.currentLife}/${attacker.maxLife}
- √ânergie: ${attacker.currentEnergy}/${attacker.maxEnergy}

CIBLE: ${target.name} (${target.powerLevel})
- Vie: ${target.currentLife}/${target.maxLife}

ATTAQUE: "${attack.description}"
- Type: ${attack.type}
- Pr√©cision: ${attack.precision}
- Puissance: ${attack.power}

ENVIRONNEMENT: ${environment}

R√àGLES DE COMBAT:
1. Applique les d√©g√¢ts selon la pr√©cision de l'attaque
2. La cible riposte automatiquement si elle survit
3. D√©cris les blessures sp√©cifiques (membre touch√©, gravit√©)
4. Calcule la perte d'√©nergie pour l'attaquant
5. Aucune attaque n'est parfaite - il y a toujours un co√ªt

D√©cris le r√©sultat en 2-3 phrases, puis indique les nouvelles barres de vie/√©nergie.`;
    }

    buildCharacterResponsePrompt(character, situation, playerAction) {
        return `Tu incarnes un PNJ dans FRICTION ULTIMATE r√©agissant √† l'action d'un joueur.

PNJ: ${character.name}
Type: ${character.type} (${character.powerLevel})
Personnalit√©: ${character.personality}
Situation: ${situation}

ACTION DU JOUEUR: "${playerAction}"

R√àGLES:
1. R√©agis selon ta personnalit√© et ton niveau de puissance
2. Les PNJ de niveau A sont tr√®s dangereux et strat√©giques
3. Riposte imm√©diatement si attaqu√©
4. Utilise le pronom "tu" pour t'adresser au joueur
5. Sois coh√©rent avec le lore de ton ordre/royaume

R√©ponds en 1-2 phrases courtes, en tant que ce PNJ.`;
    }

    async analyzePlayerAction(action, gameContext) {
        if (!this.isAvailable) {
            return {
                actionType: "unknown",
                precision: "medium",
                consequences: ["Action analys√©e de mani√®re basique"],
                affectedEntities: [],
                energyCost: 10,
                riskLevel: "medium"
            };
        }
        
        try {
            const prompt = `Analyse cette action de joueur dans FRICTION ULTIMATE:

Action: "${action}"
Contexte: ${JSON.stringify(gameContext, null, 2)}

D√©termine:
1. Type d'action (combat, exploration, social, etc.)
2. Niveau de pr√©cision (manque de d√©tails = vuln√©rabilit√©)
3. Cons√©quences probables
4. NPCs/environnement affect√©s

R√©ponds en JSON:
{
  "actionType": "string",
  "precision": "high|medium|low",
  "consequences": ["string"],
  "affectedEntities": ["string"],
  "energyCost": number,
  "riskLevel": "low|medium|high|extreme"
}`;

            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            try {
                return JSON.parse(response.text());
            } catch (parseError) {
                console.error('‚ùå Erreur de parsing JSON:', parseError);
                return {
                    actionType: "unknown",
                    precision: "low",
                    consequences: ["Action impr√©cise"],
                    affectedEntities: [],
                    energyCost: 10,
                    riskLevel: "medium"
                };
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'analyse d\'action:', error);
            return {
                actionType: "unknown",
                precision: "low",
                consequences: ["Erreur d'analyse"],
                affectedEntities: [],
                energyCost: 10,
                riskLevel: "medium"
            };
        }
    }
}

module.exports = GeminiClient;
