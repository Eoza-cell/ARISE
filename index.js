// The following code integrates RunwayML video generation into the bot's action response system.
const { default: makeWASocket, DisconnectReason, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');

// Importation des modules du jeu
const GameEngine = require('./game/GameEngine');
const DatabaseManager = require('./database/DatabaseManager');
const ImageGenerator = require('./utils/ImageGenerator');
const WhatsAppButtonManager = require('./utils/WhatsAppButtonManager');
const { initializeGameData } = require('./data/GameData');

// Clients IA et services
const OpenAIClient = require('./ai/OpenAIClient');
const GroqClient = require('./groq/GroqClient');
const GeminiClient = require('./gemini/GeminiClient');
const OllamaClient = require('./ai/OllamaClient');

// Clients de g√©n√©ration d'images
const PollinationsClient = require('./pollinations/PollinationsClient');
const RunwareClient = require('./runware/RunwareClient');
const KieAiClient = require('./kieai/KieAiClient');
const FreepikClient = require('./freepik/FreepikClient');

// Client audio et vid√©o
const PlayHTClient = require('./playht/PlayHTClient');
const CambAIClient = require('./camb/CambAIClient');
const PuterClient = require('./puter/PuterClient');
const RunwayClient = require('./runway/RunwayClient');
const HuggingFaceClient = require('./huggingface/HuggingFaceClient');

// Gestionnaire de session WhatsApp
const SessionManager = require('./whatsapp/SessionManager');

// IA Frictia pour les groupes de discussion
const FrictiaAI = require('./ai/FrictiaAI');

class FrictionUltimateBot {
    constructor() {
        this.sock = null;
        // Initialiser le moteur de jeu avec acc√®s √† la base de donn√©es
        this.dbManager = new DatabaseManager();
        this.imageGenerator = new ImageGenerator();
        this.gameEngine = new GameEngine(this.dbManager);
        this.buttonManager = null; // Sera initialis√© apr√®s la connexion
        this.isConnected = false;
        // Syst√®me de d√©duplication optimis√© pour √©conomiser la m√©moire
        this.processedMessages = new Map(); // ID du message -> timestamp
        this.maxCacheSize = 200; // R√©duire encore plus la limite de cache pour √©conomiser la m√©moire
        this.cacheCleanupInterval = 90 * 1000; // Nettoyer le cache toutes les 90 secondes (plus fr√©quent)

        // IA Frictia pour les groupes de discussion
        this.frictiaAI = new FrictiaAI();

        // Limitation de QR codes pour √©viter la boucle infinie
        this.qrCodeAttempts = 0;
        this.maxQrCodeAttempts = 5;
        this.lastQrCodeTime = 0;
        this.qrCodeCooldown = 60000; // 1 minute entre tentatives

        // Nettoyage automatique de la m√©moire plus agressif
        setInterval(() => {
            this.cleanupCache();
            // Nettoyer Frictia aussi
            this.frictiaAI.cleanup();
            // Force garbage collection si disponible
            if (global.gc) {
                global.gc();
            }
        }, this.cacheCleanupInterval);

        // Injecter l'ImageGenerator dans le GameEngine
        this.gameEngine.imageGenerator = this.imageGenerator;

        // Injecter le client Groq dans l'ImageGenerator pour optimisation des prompts
        if (this.imageGenerator.setGroqClient) {
            this.imageGenerator.setGroqClient(this.gameEngine.groqClient);
        }

        // Initialisation de HuggingFaceClient pour g√©n√©ration de vid√©os IA
        try {
            this.huggingfaceClient = new HuggingFaceClient();
            this.hasHuggingFace = this.huggingfaceClient.hasValidClient();
            if (this.hasHuggingFace) {
                console.log('ü§ó HuggingFaceClient initialis√© - G√©n√©ration de vid√©os IA avec ltxv-13b-098-distilled activ√©e');
                console.log('üé¨ Vid√©os image-to-video avec images de personnages disponibles');
            } else {
                console.log('‚ö†Ô∏è HF_TOKEN non configur√©e - HuggingFace vid√©os d√©sactiv√©es');
                console.log('üí° Ajoutez HF_TOKEN dans les secrets pour activer les vid√©os ltxv-13b-098-distilled');
            }
        } catch (error) {
            console.error('‚ùå Erreur initialisation HuggingFaceClient:', error.message);
            this.huggingfaceClient = null;
            this.hasHuggingFace = false;
        }
    }



    // M√©thodes de validation d'image
    validateImageBuffer(buffer, expectedMimetype) {
        try {
            if (!Buffer.isBuffer(buffer) || buffer.length < 10) {
                return false;
            }

            // V√©rification des signatures d'image
            const imageSignatures = {
                'image/jpeg': [[0xFF, 0xD8, 0xFF]],
                'image/jpg': [[0xFF, 0xD8, 0xFF]],
                'image/png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]],
                'image/webp': [[0x52, 0x49, 0x46, 0x46]],
                'image/gif': [[0x47, 0x49, 0x46, 0x38]]
            };

            // V√©rifier toutes les signatures possibles
            for (const [mimeType, signatures] of Object.entries(imageSignatures)) {
                for (const signature of signatures) {
                    if (buffer.length >= signature.length) {
                        let matches = true;
                        for (let i = 0; i < signature.length; i++) {
                            if (buffer[i] !== signature[i]) {
                                matches = false;
                                break;
                            }
                        }
                        if (matches) {
                            console.log(`‚úÖ Image valid√©e comme ${mimeType}`);
                            return true;
                        }
                    }
                }
            }

            console.log(`‚ö†Ô∏è Aucune signature d'image valide trouv√©e`);
            console.log(`üìä Premiers bytes: ${Array.from(buffer.slice(0, 10)).map(b => '0x' + b.toString(16).padStart(2, '0')).join(' ')}`);
            return false;
        } catch (error) {
            console.error('‚ùå Erreur validation image:', error.message);
            return false;
        }
    }

    detectImageType(buffer) {
        if (!Buffer.isBuffer(buffer) || buffer.length < 10) {
            return null;
        }

        // JPEG
        if (buffer[0] === 0xFF && buffer[1] === 0xD8 && buffer[2] === 0xFF) {
            return 'image/jpeg';
        }

        // PNG
        if (buffer[0] === 0x89 && buffer[1] === 0x50 && buffer[2] === 0x4E && buffer[3] === 0x47) {
            return 'image/png';
        }

        // WebP
        if (buffer[0] === 0x52 && buffer[1] === 0x49 && buffer[2] === 0x46 && buffer[3] === 0x46) {
            return 'image/webp';
        }

        // GIF
        if (buffer[0] === 0x47 && buffer[1] === 0x49 && buffer[2] === 0x46) {
            return 'image/gif';
        }

        return null;
    }

    async initialize() {
        console.log('üéÆ Initialisation de Friction Ultimate Bot...');

        try {
            // Initialiser la base de donn√©es
            await this.dbManager.initialize();
            console.log('‚úÖ Base de donn√©es initialis√©e');

            // Initialiser la large database
            if (this.gameEngine.largeDB) {
                await this.gameEngine.largeDB.initialize();
                console.log('‚úÖ Large Database initialis√©e');
            }

            // Initialiser les donn√©es du jeu (royaumes, ordres, etc.)
            await initializeGameData(this.dbManager);
            console.log('‚úÖ Donn√©es du jeu initialis√©es');

            // D√©marrer la connexion WhatsApp
            await this.startWhatsApp();

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation:', error);
            process.exit(1);
        }
    }

    async startWhatsApp() {
        console.log('üì± D√©marrage de la connexion WhatsApp...');

        // Utiliser le SessionManager pour g√©rer les sessions
        const sessionManager = new SessionManager();
        const session = await sessionManager.getSession();

        const { state, saveCreds } = await useMultiFileAuthState(session.authDir); // Utilisation du r√©pertoire de session

        this.sock = makeWASocket({
            auth: state,
            browser: [
                process.env.WHATSAPP_BROWSER_NAME || 'Friction Ultimate',
                process.env.WHATSAPP_BROWSER_TYPE || 'Desktop',
                process.env.WHATSAPP_BROWSER_VERSION || '1.0.0'
            ],
            logger: require('pino')({ level: 'error' }) // Reduce sensitive logging
        });

        // Gestion des √©v√©nements de connexion
        this.sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;

            if (qr) {
                const now = Date.now();

                // Limitation des QR codes pour √©viter la boucle infinie
                if (this.qrCodeAttempts >= this.maxQrCodeAttempts) {
                    console.log(`‚ùå Limite de QR codes atteinte (${this.maxQrCodeAttempts}). Arr√™t pour √©viter la boucle.`);
                    console.log('üí° Le serveur web continue de fonctionner sur le port 5000');
                    return;
                }

                if (now - this.lastQrCodeTime < this.qrCodeCooldown) {
                    console.log(`‚è≥ QR Code en cooldown (${Math.round((this.qrCodeCooldown - (now - this.lastQrCodeTime)) / 1000)}s restants)`);
                    return;
                }

                this.qrCodeAttempts++;
                this.lastQrCodeTime = now;

                console.log(`üì± QR Code g√©n√©r√© (${this.qrCodeAttempts}/${this.maxQrCodeAttempts}) - Scannez avec WhatsApp:`);
                qrcode.generate(qr, { small: true });

                // Sauvegarder le QR code dans le SessionManager si n√©cessaire
                await sessionManager.saveQrCode(qr);
            }

            if (connection === 'close') {
                const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
                console.log('‚ùå Connexion ferm√©e, reconnexion:', shouldReconnect);

                // V√©rifier si c'est un probl√®me de cl√© priv√©e invalide
                const errorMessage = lastDisconnect?.error?.message;
                if (errorMessage && errorMessage.includes('Invalid private key type')) {
                    console.log('‚ö†Ô∏è Erreur de cl√© priv√©e d√©tect√©e - arr√™t des tentatives de reconnexion');
                    console.log('üí° Pour se connecter √† WhatsApp, utilisez une vraie session ou scannez le QR code');
                    return; // Arr√™ter les tentatives de reconnexion
                }

                if (shouldReconnect) {
                    // Limiter le nombre de tentatives
                    if (!this.reconnectAttempts) this.reconnectAttempts = 0;
                    this.reconnectAttempts++;

                    if (this.reconnectAttempts > 5) {
                        console.log('‚ùå Trop de tentatives de reconnexion - arr√™t');
                        console.log('üí° Le serveur web continue de fonctionner sur le port 5000');
                        return;
                    }

                    setTimeout(() => this.startWhatsApp(), 5000);
                } else {
                    // Si d√©connect√© (loggedOut), supprimer la session pour en cr√©er une nouvelle
                    console.log('üîå D√©connexion permanente. Suppression de la session.');
                    await sessionManager.deleteSession();
                    // Optionnellement, red√©marrer compl√®tement le bot ou le processus
                    // process.exit(0); // Ou red√©marrer apr√®s un d√©lai
                }
            } else if (connection === 'open') {
                console.log('‚úÖ Connexion WhatsApp √©tablie !');
                this.isConnected = true;

                // Initialiser le gestionnaire de boutons
                this.buttonManager = new WhatsAppButtonManager(this.sock);
                console.log('üîò Gestionnaire de boutons interactifs initialis√©');

                await this.sendWelcomeMessage();

                // Sauvegarder les informations de session une fois connect√©
                await sessionManager.saveSession({
                    authDir: session.authDir,
                    isLoggedIn: true,
                    // Vous pourriez vouloir stocker d'autres m√©tadonn√©es ici
                });
            }
        });

        // Sauvegarde des credentials avec gestion d'erreur am√©lior√©e
        this.sock.ev.on('creds.update', async (creds) => {
            try {
                await saveCreds(creds);
            } catch (error) {
                console.error('‚ö†Ô∏è Erreur sauvegarde credentials:', error.message);

                // Tenter de cr√©er le dossier et r√©essayer
                if (error.code === 'ENOENT') {
                    try {
                        const fs = require('fs');
                        const path = require('path');
                        const authDir = path.join(process.cwd(), 'auth_info_baileys');
                        await fs.mkdir(authDir, { recursive: true });
                        console.log('üìÅ Dossier auth_info_baileys cr√©√©');

                        // R√©essayer la sauvegarde
                        await saveCreds(creds);
                        console.log('‚úÖ Credentials sauvegard√©s apr√®s cr√©ation du dossier');
                    } catch (retryError) {
                        console.error('‚ùå √âchec sauvegarde apr√®s cr√©ation dossier:', retryError.message);
                    }
                }
            }
        });

        // Gestion des messages entrants
        this.sock.ev.on('messages.upsert', async (m) => {
            try {
                const message = m.messages[0];
                if (!message.key.fromMe && message.message) {
                    // V√©rifier si c'est un vote de sondage (bouton simul√©)
                    if (message.message.pollUpdateMessage) {
                        await this.handlePollVote(message);
                    } else {
                        await this.handleIncomingMessage(message);
                    }
                }
            } catch (error) {
                console.error('‚ùå Erreur lors du traitement du message upsert:', error.message);
                // Continuer sans arr√™ter le bot
            }
        });

        // Gestion des erreurs de d√©chiffrement
        this.sock.ev.on('creds.update', saveCreds);

        // SUPPRIM√â: Deuxi√®me handler connection.update dupliqu√© qui causait la boucle infinie de QR codes
        // Le seul handler qui reste est celui avec les limitations QR au-dessus

        console.log('üì± Bot WhatsApp initialis√©');
    }

    async sendWelcomeMessage() {
        console.log('üéÆ Bot Friction Ultimate pr√™t !');
        console.log('üì± En attente de messages WhatsApp...');
    }

    async handleIncomingMessage(message) {
        try {
            const from = message.key.remoteJid;
            const messageId = message.key.id;

            // CORRECTION CRITIQUE : Ignorer les messages de groupe sans participant
            // (c'est le premier √©v√©nement du dupliqu√© de Baileys)
            if (from.includes('@g.us') && !message.key.participant) {
                console.log('‚ö†Ô∏è Message de groupe sans participant ignor√© (doublon Baileys)');
                return;
            }

            // R√©cup√©rer les m√©tadonn√©es du groupe si c'est un groupe
            let groupMetadata = null;
            let detectedKingdom = null;
            if (from.includes('@g.us')) {
                try {
                    groupMetadata = await this.sock.groupMetadata(from);
                    const groupName = groupMetadata.subject;

                    // Normaliser le nom du groupe pour g√©rer les caract√®res sp√©ciaux
                    const normalizedGroupName = this.normalizeGroupName(groupName);
                    console.log(`üìù Nom groupe re√ßu: "${groupName}"`);
                    console.log(`üî§ Nom groupe normalis√©: "${normalizedGroupName}"`);

                    // D√©tecter automatiquement le royaume via le nom du groupe normalis√©
                    detectedKingdom = this.gameEngine.adminManager.detectKingdomFromGroupName(normalizedGroupName);

                    if (detectedKingdom) {
                        // Auto-assigner le groupe au royaume d√©tect√©
                        this.gameEngine.adminManager.kingdomGroups.set(from, detectedKingdom);
                        console.log(`üè∞ Groupe "${groupName}" (normalis√©: "${normalizedGroupName}") auto-assign√© au royaume: ${detectedKingdom}`);
                    } else {
                        console.log(`üîç Aucun royaume d√©tect√© pour "${groupName}" (normalis√©: "${normalizedGroupName}")`);
                    }
                } catch (groupError) {
                    console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les m√©tadonn√©es du groupe:', groupError.message);
                }
            }

            // Syst√®me de d√©duplication bas√© sur l'ID unique du message par chat
            const messageKey = `${from}:${messageId}`;
            const now = Date.now();

            if (this.processedMessages.has(messageKey)) {
                const lastProcessed = this.processedMessages.get(messageKey);
                console.log(`‚ö†Ô∏è Message d√©j√† trait√© ignor√©: ${messageKey} (il y a ${now - lastProcessed}ms)`);
                return;
            }

            // Marquer le message comme trait√©
            this.processedMessages.set(messageKey, now);

            // Nettoyage du cache - garder seulement les messages des 10 derni√®res minutes
            this.cleanupCache();

            const messageText = this.extractMessageText(message);
            const messageImage = await this.extractMessageImage(message);

            // Si pas de texte ni d'image, ignorer
            if (!messageText && !messageImage) {
                console.log('‚ö†Ô∏è Message ignor√©: pas de texte ni d\'image');
                return;
            }

            // Log des types de message pour debug
            if (messageImage) {
                console.log('üì∏ Message avec image d√©tect√©');
            }
            if (messageText) {
                console.log(`üìù Message texte: "${messageText}"`);
                // D√©tecter si le message contient des polices sp√©ciales
                if (messageText !== this.normalizeStyledText(messageText)) {
                    console.log(`üé® Police sp√©ciale d√©tect√©e - normalis√©: "${this.normalizeStyledText(messageText)}"`);
                }
            }

            // Extraction CORRECTE du num√©ro WhatsApp du joueur
            let playerNumber;
            if (from.includes('@g.us')) {
                // Message de groupe - TOUJOURS utiliser le participant (utilisateur r√©el)
                playerNumber = message.key.participant;
                if (!playerNumber) {
                    console.log('‚ö†Ô∏è Message de groupe sans participant - ignor√©');
                    return;
                }
            } else {
                // Message priv√© - utiliser l'exp√©diteur direct
                playerNumber = from;
            }

            // Nettoyer les formats @lid et autres suffixes pour avoir un ID propre
            if (playerNumber.includes(':')) {
                playerNumber = playerNumber.split(':')[0];
            }

            console.log(`üì® Message de ${playerNumber}: ${messageText || '[image]'}`);
            console.log(`üîç ID utilisateur: "${playerNumber}" | Chat: "${from}"`);

            // Traitement sp√©cial pour l'administrateur
            if (playerNumber.includes('48198576038116')) {
                console.log(`üëë ID administrateur d√©tect√©: ${playerNumber}`);
            }

            // Traitement du message par le moteur de jeu
            const normalizedMessage = messageText ? this.normalizeStyledText(messageText.trim()) : null;

            // Ajouter des logs pour debugging
            if (messageImage) {
                console.log(`üì∏ Image re√ßue de ${playerNumber}: ${messageImage.mimetype}, ${messageImage.buffer.length} bytes`);
            }

            const result = await this.gameEngine.processPlayerMessage({
                playerNumber,
                chatId: from,
                message: normalizedMessage,
                originalMessage: messageText, // Garder l'original pour l'affichage
                imageMessage: messageImage,
                originalMessageObj: message,
                sock: this.sock,
                dbManager: this.dbManager,
                imageGenerator: this.imageGenerator
            });

            // FRICTIA AI - Connect√©e √† TOUTES les commandes et conversations
            if (messageText) {
                try {
                    const groupName = groupMetadata?.subject || 'Conversation priv√©e';
                    const userName = playerNumber.split('@')[0];
                    const isGroup = from.includes('@g.us');
                    const isDirectlyMentioned = messageText.toLowerCase().includes('frictia') || messageText.toLowerCase().includes('erza');

                    // Traiter les commandes sp√©ciales de Frictia/Erza d'abord
                    if (messageText.startsWith('/') || messageText.startsWith('!') || isDirectlyMentioned) {
                        const command = messageText.replace(/^[\/!]/, '').trim().split(' ')[0];
                        const commandResponse = await this.frictiaAI.handleCommand(command, userName);

                        if (commandResponse) {
                            // Envoyer la r√©ponse de commande Frictia imm√©diatement
                            setTimeout(async () => {
                                await this.sendResponse(from, {
                                    text: `‚öîÔ∏è **Frictia (Erza Scarlet)** ‚öîÔ∏è\n\n${commandResponse}`
                                });
                                this.frictiaAI.updateLastActivity(from);
                            }, 500);
                        }
                    }

                    // Ajouter TOUS les messages au contexte (groupes ET priv√©)
                    this.frictiaAI.addToConversationHistory(from, userName, messageText);

                    // Frictia peut r√©pondre dans TOUTES les situations (connect√©e √† tout)
                    const shouldFrictiaRespond = isDirectlyMentioned ||
                                               this.frictiaAI.shouldRespond(messageText, from, isDirectlyMentioned);

                    if (shouldFrictiaRespond) {
                        // Obtenir le contexte de conversation
                        const conversationContext = this.frictiaAI.getConversationContext(from);

                        // G√©n√©rer une r√©ponse de Frictia/Erza
                        const frictiaResponse = await this.frictiaAI.generateResponse(
                            messageText,
                            groupName,
                            userName,
                            conversationContext
                        );

                        if (frictiaResponse) {
                            // D√©lai diff√©rent selon si c'est mention directe ou spontan√©
                            const delay = isDirectlyMentioned ? 1000 : (3000 + Math.random() * 4000);

                            setTimeout(async () => {
                                // Ajouter sticker Erza al√©atoire parfois
                                const useSticker = Math.random() < 0.3;
                                const stickerText = useSticker ? ` ${this.frictiaAI.getRandomErzaSticker()}` : '';

                                await this.sendResponse(from, {
                                    text: `${frictiaResponse}${stickerText}`
                                });

                                // Mettre √† jour la derni√®re activit√©
                                this.frictiaAI.updateLastActivity(from);

                                // Ajouter la r√©ponse de Frictia au contexte
                                this.frictiaAI.addToConversationHistory(from, 'Frictia', frictiaResponse);
                            }, delay);
                        }
                    }
                } catch (frictiaError) {
                    console.log('‚ö†Ô∏è Erreur Frictia AI:', frictiaError.message);
                }
            }

            // Envoi de la r√©ponse unifi√©e du jeu
            setTimeout(async () => {
                await this.sendResponse(from, result);
            }, 100);

        } catch (error) {
            console.error('‚ùå Erreur lors du traitement du message:', error);
            await this.sendResponse(message.key.remoteJid, {
                text: "‚ùå Une erreur s'est produite. Veuillez r√©essayer."
            });
        }
    }

    extractMessageText(message) {
        let text = null;

        if (message.message?.conversation) {
            text = message.message.conversation;
        } else if (message.message?.extendedTextMessage?.text) {
            text = message.message.extendedTextMessage.text;
        } else if (message.message?.imageMessage?.caption) {
            text = message.message.imageMessage.caption;
        } else if (message.message?.videoMessage?.caption) {
            text = message.message.videoMessage.caption;
        }

        // Normaliser les polices sp√©ciales et caract√®res Unicode
        if (text) {
            // Convertir les polices styl√©es en texte normal
            text = this.normalizeStyledText(text);
        }

        return text;
    }

    normalizeStyledText(text) {
        if (!text) return text;

        // Mapping des caract√®res styl√©s vers du texte normal
        const styleMap = {
            // Bold Mathematical (ùêÄ-ùê≥)
            'ùêÄ': 'A', 'ùêÅ': 'B', 'ùêÇ': 'C', 'ùêÉ': 'D', 'ùêÑ': 'E', 'ùêÖ': 'F', 'ùêÜ': 'G', 'ùêá': 'H', 'ùêà': 'I', 'ùêâ': 'J',
            'ùêä': 'K', 'ùêã': 'L', 'ùêå': 'M', 'ùêç': 'N', 'ùêé': 'O', 'ùêè': 'P', 'ùêê': 'Q', 'ùêë': 'R', 'ùêí': 'S', 'ùêì': 'T',
            'ùêî': 'U', 'ùêï': 'V', 'ùêñ': 'W', 'ùêó': 'X', 'ùêò': 'Y', 'ùêô': 'Z',
            'ùêö': 'a', 'ùêõ': 'b', 'ùêú': 'c', 'ùêù': 'd', 'ùêû': 'e', 'ùêü': 'f', 'ùê†': 'g', 'ùê°': 'h', 'ùê¢': 'i', 'ùê£': 'j',
            'ùê§': 'k', 'ùê•': 'l', 'ùê¶': 'm', 'ùêß': 'n', 'ùê®': 'o', 'ùê©': 'p', 'ùê™': 'q', 'ùê´': 'r', 'ùê¨': 's', 'ùê≠': 't',
            'ùêÆ': 'u', 'ùêØ': 'v', 'ùê∞': 'w', 'ùê±': 'x', 'ùê≤': 'y', 'ùê≥': 'z',

            // Small Capitals (·¥Ä-·¥¢)
            '·¥Ä': 'A', ' ô': 'B', '·¥Ñ': 'C', '·¥Ö': 'D', '·¥á': 'E', '“ì': 'F', '…¢': 'G', ' ú': 'H', '…™': 'I', '·¥ä': 'J',
            '·¥ã': 'K', ' ü': 'L', '·¥ç': 'M', '…¥': 'N', '·¥è': 'O', '·¥ò': 'P', 'Q': 'Q', ' Ä': 'R', 'Íú±': 'S', '·¥õ': 'T',
            '·¥ú': 'U', '·¥†': 'V', '·¥°': 'W', 'x': 'X', ' è': 'Y', '·¥¢': 'Z',

            // Circled characters (‚í∂-‚ì©)
            '‚í∂': 'A', '‚í∑': 'B', '‚í∏': 'C', '‚íπ': 'D', '‚í∫': 'E', '‚íª': 'F', '‚íº': 'G', '‚íΩ': 'H', '‚íæ': 'I', '‚íø': 'J',
            '‚ìÄ': 'K', '‚ìÅ': 'L', '‚ìÇ': 'M', '‚ìÉ': 'N', '‚ìÑ': 'O', '‚ìÖ': 'P', '‚ìÜ': 'Q', '‚ìá': 'R', '‚ìà': 'S', '‚ìâ': 'T',
            '‚ìä': 'U', '‚ìã': 'V', '‚ìå': 'W', '‚ìç': 'X', '‚ìé': 'Y', '‚ìè': 'Z',

            // Autres caract√®res sp√©ciaux courants
            '‚ë†': '1', '‚ë°': '2', '‚ë¢': '3', '‚ë£': '4', '‚ë§': '5', '‚ë•': '6', '‚ë¶': '7', '‚ëß': '8', '‚ë®': '9', '‚ë©': '10'
        };

        let normalizedText = text;

        // Remplacer les caract√®res styl√©s
        for (const [styled, normal] of Object.entries(styleMap)) {
            normalizedText = normalizedText.replace(new RegExp(styled, 'g'), normal);
        }

        // Normaliser la casse pour d√©tecter les commandes
        return normalizedText;
    }

    /**
     * Normalise les noms de groupe avec caract√®res sp√©ciaux
     */
    normalizeGroupName(groupName) {
        if (!groupName) return '';

        try {
            // Normalisation Unicode compl√®te
            let normalized = groupName.normalize('NFKD');

            // Remplacer les caract√®res accentu√©s par leurs √©quivalents de base
            normalized = normalized.replace(/[\u0300-\u036f]/g, ''); // Supprimer les diacritiques

            // Mapping sp√©cial pour les caract√®res styl√©s WhatsApp
            const unicodeMap = {
                // Caract√®res styl√©s bold
                'ùêÄ': 'A', 'ùêÅ': 'B', 'ùêÇ': 'C', 'ùêÉ': 'D', 'ùêÑ': 'E', 'ùêÖ': 'F', 'ùêÜ': 'G', 'ùêá': 'H', 'ùêà': 'I', 'ùêâ': 'J',
                'ùêä': 'K', 'ùêã': 'L', 'ùêå': 'M', 'ùêç': 'N', 'ùêé': 'O', 'ùêè': 'P', 'ùêê': 'Q', 'ùêë': 'R', 'ùêí': 'S', 'ùêì': 'T',
                'ùêî': 'U', 'ùêï': 'V', 'ùêñ': 'W', 'ùêó': 'X', 'ùêò': 'Y', 'ùêô': 'Z',
                'ùêö': 'a', 'ùêõ': 'b', 'ùêú': 'c', 'ùêù': 'd', 'ùêû': 'e', 'ùêü': 'f', 'ùê†': 'g', 'ùê°': 'h', 'ùê¢': 'i', 'ùê£': 'j',
                'ùê§': 'k', 'ùê•': 'l', 'ùê¶': 'm', 'ùêß': 'n', 'ùê®': 'o', 'ùê©': 'p', 'ùê™': 'q', 'ùê´': 'r', 'ùê¨': 's', 'ùê≠': 't',
                'ùêÆ': 'u', 'ùêØ': 'v', 'ùê∞': 'w', 'ùê±': 'x', 'ùê≤': 'y', 'ùê≥': 'z',

                // Caract√®res fancy et stylis√©s
                '·¥Ä': 'A', ' ô': 'B', '·¥Ñ': 'C', '·¥Ö': 'D', '·¥á': 'E', '“ì': 'F', '…¢': 'G', ' ú': 'H', '…™': 'I', '·¥ä': 'J',
                '·¥ã': 'K', ' ü': 'L', '·¥ç': 'M', '…¥': 'N', '·¥è': 'O', '·¥ò': 'P', ' Ä': 'R', 'Íú±': 'S', '·¥õ': 'T',
                '·¥ú': 'U', '·¥†': 'V', '·¥°': 'W', ' è': 'Y', '·¥¢': 'Z',

                // Caract√®res encercl√©s
                '‚í∂': 'A', '‚í∑': 'B', '‚í∏': 'C', '‚íπ': 'D', '‚í∫': 'E', '‚íª': 'F', '‚íº': 'G', '‚íΩ': 'H', '‚íæ': 'I', '‚íø': 'J',
                '‚ìÄ': 'K', '‚ìÅ': 'L', '‚ìÇ': 'M', '‚ìÉ': 'N', '‚ìÑ': 'O', '‚ìÖ': 'P', '‚ìÜ': 'Q', '‚ìá': 'R', '‚ìà': 'S', '‚ìâ': 'T',
                '‚ìä': 'U', '‚ìã': 'V', '‚ìå': 'W', '‚ìç': 'X', '‚ìé': 'Y', '‚ìè': 'Z',
                '‚ìê': 'a', '‚ìë': 'b', '‚ìí': 'c', '‚ìì': 'd', '‚ìî': 'e', '‚ìï': 'f', '‚ìñ': 'g', '‚ìó': 'h', '‚ìò': 'i', '‚ìô': 'j',
                '‚ìö': 'k', '‚ìõ': 'l', '‚ìú': 'm', '‚ìù': 'n', '‚ìû': 'o', '‚ìü': 'p', '‚ì†': 'q', '‚ì°': 'r', '‚ì¢': 's', '‚ì£': 't',
                '‚ì§': 'u', '‚ì•': 'v', '‚ì¶': 'w', '‚ìß': 'x', '‚ì®': 'y', '‚ì©': 'z',

                // √âmojis de lettres
                'üÖ∞': 'A', 'üÖ±': 'B', 'üÖ≤': 'C', 'üÖ≥': 'D', 'üÖ¥': 'E', 'üÖµ': 'F', 'üÖ∂': 'G', 'üÖ∑': 'H', 'üÖ∏': 'I', 'üÖπ': 'J',
                'üÖ∫': 'K', 'üÖª': 'L', 'üÖº': 'M', 'üÖΩ': 'N', 'üÖæ': 'O', 'üÖø': 'P', 'üÜÄ': 'Q', 'üÜÅ': 'R', 'üÜÇ': 'S', 'üÜÉ': 'T',
                'üÜÑ': 'U', 'üÜÖ': 'V', 'üÜÜ': 'W', 'üÜá': 'X', 'üÜà': 'Y', 'üÜâ': 'Z',

                // Lettres avec carr√©s
                'üÑ∞': 'A', 'üÑ±': 'B', 'üÑ≤': 'C', 'üÑ≥': 'D', 'üÑ¥': 'E', 'üÑµ': 'F', 'üÑ∂': 'G', 'üÑ∑': 'H', 'üÑ∏': 'I', 'üÑπ': 'J',
                'üÑ∫': 'K', 'üÑª': 'L', 'üÑº': 'M', 'üÑΩ': 'N', 'üÑæ': 'O', 'üÑø': 'P', 'üÖÄ': 'Q', 'üÖÅ': 'R', 'üÖÇ': 'S', 'üÖÉ': 'T',
                'üÖÑ': 'U', 'üÖÖ': 'V', 'üÖÜ': 'W', 'üÖá': 'X', 'üÖà': 'Y', 'üÖâ': 'Z',

                // Caract√®res sp√©ciaux de ponctuation
                '‚Äπ': '<', '‚Ä∫': '>', '¬´': '"', '¬ª': '"', '‚Äû': '"', '"': '"', '"': '"', ''': "'", ''': "'",
                '‚Ä¶': '...', '‚Äì': '-', '‚Äî': '-', '‚Ä¢': '*', '¬∑': '.', '‚Äö': ',', '‚Äõ': "'",

                // Autres caract√®res styl√©s communs
                ' å': 'v', ' å': 'A', '…ê': 'a', '…Ø': 'm', '…π': 'r', '…æ': 'r', ' á': 't', ' é': 'y'
            };

            // Appliquer le mapping des caract√®res sp√©ciaux
            for (const [special, normal] of Object.entries(unicodeMap)) {
                normalized = normalized.replace(new RegExp(special, 'g'), normal);
            }

            console.log(`üî§ Normalisation nom groupe: "${groupName}" ‚Üí "${normalized}"`);
            return normalized;

        } catch (error) {
            console.error('‚ùå Erreur normalisation nom groupe:', error);
            return groupName; // Retourner l'original en cas d'erreur
        }
    }

    async extractMessageImage(message) {
        try {
            let imageMessage = null;

            if (message.message?.imageMessage) {
                console.log('üì∏ Image d√©tect√©e dans le message');
                imageMessage = message.message.imageMessage;
            } else if (message.message?.viewOnceMessage?.message?.imageMessage) {
                console.log('üì∏ Image view-once d√©tect√©e');
                imageMessage = message.message.viewOnceMessage.message.imageMessage;
            }

            if (imageMessage) {
                console.log(`üì• D√©but t√©l√©chargement image - Type: ${imageMessage.mimetype}, Taille annonc√©e: ${imageMessage.fileLength || 'inconnue'}`);

                try {
                    const { downloadMediaMessage } = require('@whiskeysockets/baileys');

                    // Augmenter le timeout pour les grandes images
                    const downloadOptions = {
                        logger: require('pino')({ level: 'silent' }),
                        timeout: 90000 // 90 secondes pour les images plus lourdes
                    };

                    let buffer = null;
                    let attempts = 0;
                    const maxAttempts = 5; // Plus de tentatives

                    // Plusieurs tentatives de t√©l√©chargement
                    while (!buffer && attempts < maxAttempts) {
                        attempts++;
                        console.log(`üì• Tentative ${attempts}/${maxAttempts} de t√©l√©chargement...`);

                        try {
                            buffer = await downloadMediaMessage(message, 'buffer', downloadOptions);

                            if (buffer && buffer.length > 0) {
                                // Validation am√©lior√©e du buffer
                                if (!Buffer.isBuffer(buffer)) {
                                    console.log(`‚ö†Ô∏è Tentative ${attempts} - Buffer invalide (pas un Buffer)`);
                                    buffer = null;
                                    continue;
                                }

                                // V√©rifier que c'est vraiment une image valide
                                const isValidImage = this.validateImageBuffer(buffer, imageMessage.mimetype);
                                if (!isValidImage) {
                                    console.log(`‚ö†Ô∏è Tentative ${attempts} - Image invalide ou corrompue`);
                                    buffer = null;
                                    continue;
                                }

                                console.log(`‚úÖ T√©l√©chargement r√©ussi √† la tentative ${attempts}`);
                                break;
                            } else {
                                console.log(`‚ö†Ô∏è Tentative ${attempts} √©chou√©e - buffer invalide`);
                                buffer = null;
                            }
                        } catch (attemptError) {
                            console.log(`‚ö†Ô∏è Tentative ${attempts} √©chou√©e:`, attemptError.message);
                            buffer = null;

                            if (attempts < maxAttempts) {
                                const waitTime = attempts * 1000; // Attente progressive
                                console.log(`‚è±Ô∏è Attente de ${waitTime}ms avant nouvelle tentative...`);
                                await new Promise(resolve => setTimeout(resolve, waitTime));
                            }
                        }
                    }

                    if (!buffer) {
                        console.log('‚ùå Toutes les tentatives de t√©l√©chargement ont √©chou√©');
                        return null;
                    }

                    if (buffer.length === 0) {
                        console.log('‚ùå Buffer vide apr√®s t√©l√©chargement');
                        return null;
                    }

                    // Validation finale de la taille
                    if (buffer.length < 500) { // Minimum 500 bytes pour une image valide
                        console.log(`‚ùå Image trop petite: ${buffer.length} bytes (minimum: 500 bytes)`);
                        return null;
                    }

                    if (buffer.length > 10 * 1024 * 1024) { // Maximum 10MB
                        console.log(`‚ùå Image trop grosse: ${buffer.length} bytes (maximum: 10MB)`);
                        return null;
                    }

                    console.log(`‚úÖ Image t√©l√©charg√©e avec succ√®s: ${buffer.length} bytes`);

                    // Valider que c'est bien une image avec v√©rification √©tendue
                    const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
                    let mimetype = (imageMessage.mimetype || 'image/jpeg').toLowerCase();

                    if (!validImageTypes.includes(mimetype)) {
                        console.log(`‚ö†Ô∏è Type d'image non support√©: ${mimetype} - Types accept√©s: ${validImageTypes.join(', ')}`);
                        // Essayer de d√©tecter le type √† partir des bytes
                        mimetype = this.detectImageType(buffer) || 'image/jpeg';
                        console.log(`üîÑ Type d√©tect√©/par d√©faut: ${mimetype}`);
                    }

                    const imageData = {
                        buffer: buffer,
                        mimetype: mimetype,
                        caption: imageMessage.caption || '',
                        width: imageMessage.width || 0,
                        height: imageMessage.height || 0,
                        fileLength: imageMessage.fileLength || buffer.length,
                        sha256: imageMessage.fileSha256?.toString('hex') || null,
                        downloadTimestamp: Date.now(),
                        isValidated: true
                    };

                    console.log(`üìä Image extraite - Taille: ${buffer.length} bytes, Type: ${mimetype}, Dimensions: ${imageData.width}x${imageData.height}`);
                    return imageData;

                } catch (downloadError) {
                    console.error('‚ùå Erreur t√©l√©chargement principal:', downloadError.message);
                    console.error('‚ùå Type erreur:', downloadError.name);
                    console.error('‚ùå Code erreur:', downloadError.code);

                    // Tentative alternative de t√©l√©chargement via stream
                    try {
                        console.log('üîÑ Tentative alternative via stream...');
                        const { downloadMediaMessage } = require('@whiskeysockets/baileys');

                        const stream = await downloadMediaMessage(message, 'stream', {
                            logger: require('pino')({ level: 'silent' }),
                            timeout: 45000 // Plus de temps pour le stream
                        });

                        if (stream) {
                            console.log('üì• Stream obtenu, assemblage des chunks...');
                            const chunks = [];
                            let totalSize = 0;

                            for await (const chunk of stream) {
                                chunks.push(chunk);
                                totalSize += chunk.length;
                                console.log(`üì¶ Chunk re√ßu: ${chunk.length} bytes (total: ${totalSize})`);
                            }

                            const buffer = Buffer.concat(chunks);

                            if (buffer.length > 0) {
                                console.log(`‚úÖ Image t√©l√©charg√©e via stream: ${buffer.length} bytes`);
                                return {
                                    buffer: buffer,
                                    mimetype: imageMessage.mimetype || 'image/jpeg',
                                    caption: imageMessage.caption || '',
                                    width: imageMessage.width || 0,
                                    height: imageMessage.height || 0,
                                    fileLength: buffer.length,
                                    sha256: imageMessage.fileSha256?.toString('hex') || null,
                                    downloadTimestamp: Date.now(),
                                    downloadMethod: 'stream'
                                };
                            } else {
                                console.log('‚ùå Stream assembl√© mais buffer vide');
                            }
                        } else {
                            console.log('‚ùå Stream null re√ßu');
                        }
                    } catch (streamError) {
                        console.error('‚ùå Erreur t√©l√©chargement stream:', streamError.message);
                        console.error('‚ùå Stack stream:', streamError.stack);
                    }

                    console.log('‚ùå Toutes les m√©thodes de t√©l√©chargement ont √©chou√©');
                    return null;
                }
            }

            return null;
        } catch (error) {
            console.error('‚ùå Erreur GLOBALE t√©l√©chargement image:', error.message);
            console.error('‚ùå Stack trace compl√®te:', error.stack);
            return null;
        }
    }

    async sendResponse(chatId, response) {
        try {
            // Envoi unifi√© : image avec texte complet, puis audio/vid√©o si disponibles
            if (response.image) {
                await this.sock.sendMessage(chatId, {
                    image: response.image,
                    caption: response.text
                });
            } else {
                await this.sock.sendMessage(chatId, { text: response.text });
            }

            // Envoyer l'audio en tant que message vocal uniquement si disponible et valide
            if (response.audio) {
                try {
                    const fs = require('fs');
                    let audioBuffer = null;

                    if (Buffer.isBuffer(response.audio)) {
                        audioBuffer = response.audio;
                    } else if (typeof response.audio === 'string') {
                        try {
                            await fs.promises.access(response.audio);
                            audioBuffer = await fs.promises.readFile(response.audio);
                            console.log(`‚úÖ Audio lu: ${response.audio}`);
                        } catch (fileError) {
                            console.log(`‚ö†Ô∏è Audio non trouv√©: ${response.audio}`);
                        }
                    }

                    if (audioBuffer && audioBuffer.length > 100) { // Au moins 100 bytes pour √™tre valide
                        await this.sock.sendMessage(chatId, {
                            audio: audioBuffer,
                            mimetype: 'audio/mpeg',
                            ptt: true,
                            seconds: Math.min(60, Math.max(5, Math.round(response.text.length / 15)))
                        });
                        console.log(`‚úÖ Audio envoy√© (${audioBuffer.length} bytes)`);

                        // Nettoyer le fichier temporaire
                        if (typeof response.audio === 'string') {
                            setTimeout(() => {
                                fs.unlink(response.audio, () => {});
                            }, 5000);
                        }
                    }
                } catch (audioError) {
                    console.log('‚ö†Ô∏è Audio ignor√©:', audioError.message);
                }
            }

            // Envoyer la vid√©o si disponible
            if (response.video) {
                setTimeout(async () => {
                    try {
                        const fs = require('fs');
                        console.log('üé¨ Envoi vid√©o - Type:', typeof response.video);
                        console.log('üé¨ Envoi vid√©o - Valeur:', response.video);

                        let videoBuffer;

                        if (typeof response.video === 'string') {
                            // C'est un chemin de fichier
                            await fs.promises.access(response.video);
                            videoBuffer = await fs.promises.readFile(response.video);
                            console.log(`‚úÖ Vid√©o lue depuis: ${response.video} (${videoBuffer.length} bytes)`);
                        } else if (Buffer.isBuffer(response.video)) {
                            // C'est d√©j√† un buffer
                            videoBuffer = response.video;
                            console.log(`‚úÖ Vid√©o buffer directe (${videoBuffer.length} bytes)`);
                        } else {
                            throw new Error('Format de vid√©o non support√©');
                        }

                        await this.sock.sendMessage(chatId, {
                            video: videoBuffer,
                            caption: 'üé¨ Vid√©o de l\'action',
                            gifPlayback: false
                        });
                        console.log(`‚úÖ Vid√©o envoy√©e avec succ√®s (${videoBuffer.length} bytes)`);

                        // Nettoyer le fichier temporaire si c'est un chemin
                        if (typeof response.video === 'string') {
                            setTimeout(() => {
                                fs.unlink(response.video, () => {});
                            }, 5000);
                        }
                    } catch (videoError) {
                        console.error('‚ùå Erreur vid√©o d√©taill√©e:', videoError.message);
                        console.error('‚ùå Stack vid√©o:', videoError.stack);
                    }
                }, 1000); // R√©duire le d√©lai √† 1 seconde
            }

        } catch (error) {
            console.error('‚ùå Erreur envoi r√©ponse:', error);
            try {
                await this.sock.sendMessage(chatId, { text: response.text });
            } catch (fallbackError) {
                console.error('‚ùå Erreur fallback:', fallbackError);
            }
        }
    }

    async handlePollVote(message) {
        try {
            const from = message.key.remoteJid;
            const voter = message.key.participant || from;

            console.log(`üó≥Ô∏è Vote de sondage re√ßu de ${voter}`);

            // Pour l'instant, juste loguer le vote - vous pouvez ajouter la logique sp√©cifique plus tard
            console.log('üìä Vote sondage d√©tect√© - Action bouton simul√©');

            // Optionnel: envoyer une confirmation
            await this.sock.sendMessage(from, {
                text: '‚úÖ Action re√ßue! (Bouton simul√© activ√©)'
            });

        } catch (error) {
            console.error('‚ùå Erreur traitement vote sondage:', error);
        }
    }

    // M√©thode de d√©monstration pour tester les boutons
    async demonstrateButtons(chatId) {
        if (!this.buttonManager) {
            console.log('‚ö†Ô∏è Gestionnaire de boutons non initialis√©');
            return;
        }

        try {
            // Envoyer un message d'introduction
            await this.sock.sendMessage(chatId, {
                text: 'üéÆ D√©monstration des boutons interactifs!\nVoici un menu simul√© avec des sondages:'
            });

            // Attendre un peu
            await new Promise(resolve => setTimeout(resolve, 1000));

            // Cr√©er le menu principal du jeu
            await this.buttonManager.sendMainGameMenu(chatId);

        } catch (error) {
            console.error('‚ùå Erreur d√©monstration boutons:', error);
        }
    }

    // M√©thode de nettoyage du cache pour √©viter les fuites m√©moire - OPTIMIS√âE
    cleanupCache() {
        const now = Date.now();
        const maxAge = 5 * 60 * 1000; // 5 minutes (r√©duit de 10)
        const sizeBefore = this.processedMessages.size;

        // Supprimer les messages anciens
        let cleaned = 0;
        for (const [key, timestamp] of this.processedMessages.entries()) {
            if (now - timestamp > maxAge) {
                this.processedMessages.delete(key);
                cleaned++;
            }
        }

        // Si le cache est encore trop gros, supprimer les plus anciens
        if (this.processedMessages.size > this.maxCacheSize) {
            const entries = Array.from(this.processedMessages.entries())
                .sort((a, b) => a[1] - b[1]); // Trier par timestamp

            const toDelete = this.processedMessages.size - this.maxCacheSize;
            for (let i = 0; i < toDelete; i++) {
                this.processedMessages.delete(entries[i][0]);
                cleaned++;
            }
        }

        if (cleaned > 0) {
            console.log(`üßπ Cache: ${cleaned} entr√©es supprim√©es, taille: ${this.processedMessages.size}/${this.maxCacheSize}`);
        }

        // Si le cache est encore trop grand, garder seulement les plus r√©cents
        if (this.processedMessages.size > this.maxCacheSize) {
            const sortedEntries = Array.from(this.processedMessages.entries())
                .sort((a, b) => b[1] - a[1]) // Trier par timestamp d√©croissant
                .slice(0, this.maxCacheSize); // Garder seulement les N plus r√©cents

            this.processedMessages.clear();
            for (const [key, timestamp] of sortedEntries) {
                this.processedMessages.set(key, timestamp);
            }
        }

        const sizeAfter = this.processedMessages.size;
        if (sizeBefore !== sizeAfter) {
            console.log(`üßπ Cache nettoy√©: ${sizeBefore} ‚Üí ${sizeAfter} messages`);
        }
    }
}

// D√©marrage du bot
const bot = new FrictionUltimateBot();

// D√©marrer le serveur keep-alive pour UptimeRobot
require('./server/keepalive');

// Gestion propre de l'arr√™t du processus
process.on('SIGINT', () => {
    console.log('üõë Arr√™t du bot...');
    process.exit(0);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
    process.exit(1);
});

// Lancement du bot
bot.initialize().catch(console.error);

console.log('üéÆ FRICTION ULTIMATE - Bot WhatsApp RPG');
console.log('üöÄ D√©marrage en cours...');